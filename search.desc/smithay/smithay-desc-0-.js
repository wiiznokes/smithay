searchState.loadedDescShard("smithay", 0, "Smithay: the Wayland compositor smithy\nBackend (rendering/input) helpers\nMacro to delegate implementation of the alpha modifier …\nMacro to delegate implementation of the wp content type …\nMacro to delegate implementation of the linux dmabuf to …\nMacro to delegate implementation of the drm-lease protocol …\nMacro to delegate implementation of the ext idle notify …\nMacro to delegate implementation of the keyboard shortcuts …\nMacro to delegate implementation of wlr layer shell to …\nMacro to delegate implementation of the pointer gestures …\nMacro to delegate implementation of the relative pointer …\nMacro to delegate implementation of the security context …\nMacro to delegate implementation of the xdg activation to …\nMacro to delegate implementation of the xdg decoration to …\nMacro to delegate implementation of the xdg dialog to …\nMacro to delegate implementation of the xdg foreign to …\nMacro to delegate implementation of the xwayland keyboard …\nMacro to delegate implementation of the xwayland keyboard …\nDesktop management helpers\nCreate a <code>EGLPlatform&lt;&#39;a&gt;</code> for the provided platform.\nInput abstractions\nOutput\nReexports of crates, that are part of the public api, for …\nAggregate multiple types implementing <code>RenderElement</code> into a …\nAggregate multiple types implementing <code>SpaceElement</code> into a …\nVarious utilities functions and types\nProtocol-related utilities\nXWayland utilities\nThe buffers have already been swapped.\nThe corresponding context has been lost and needs to be …\nError that can happen when swapping buffers.\nA temporary condition caused to rendering to fail.\nBuffer allocation and management.\nThis module represents abstraction on top the linux direct …\nCommon traits and types for egl rendering\nReturns the argument unchanged.\nCommon traits for input backends to receive input from.\nCalls <code>U::from(self)</code>.\nImplementation of input backend trait for types provided …\nRendering functionality and abstractions\nAbstraction of different session APIs.\n<code>udev</code> related functionality for automated device scanning\nTypes to initialize and use Vulkan.\nImplementation of backend traits for types provided by …\nImplementation of the backend types using X11.\nInterface to create Buffers\nCommon trait describing common properties of most types of …\nBuffer type produced by this allocator\nError type thrown if allocations fail\nSlot of a swapchain containing an allocated buffer and its …\nSwapchain handling a fixed set of re-usable buffers e.g. …\nWraps some u32 that isn’t a DRM fourcc we recognize\nWraps some u8 that isn’t a DRM vendor we recognize\nAcquire a new slot from the swapchain, if one is still …\nRetrieve the age of the buffer\nAllocator used by the swapchain\nTry to create a buffer with the given dimensions and pixel …\nIf the u32 is in a valid format to be a fourcc, get an …\nModule for dmabuf buffers.\nModule for DumbBuffer buffers\nFormat info tables for DRM formats.\nPixel format of the buffer\nGet set format\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from an u64\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nModule for Buffers created using libgbm.\nHeight of the two-dimensional buffer\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new swapchain with the desired allocator, …\nReset the age for each buffer.\nRemove all internally cached buffers.\nChange the dimensions of newly returned buffers.\nSize of the two-dimensional buffer\nGet the string representation of the format’s fourcc.\nIf the u32 is in a valid format to be a fourcc, get its …\nMark a given buffer as submitted.\nConvert from an u32\nConvert from an u8\nRetrieve userdata for this slot.\nGet the vendor of the modifier, if any\nModule for Buffers created using Vulkan.\nWidth of the two-dimensional buffer\nDmabuf is already ready for the given interest\nType erased error\nBuffer that can be exported as Dmabufs\nThe buffer content if interlaced is bottom-field first\nStrong reference to a dmabuf handle\nWrapper for Allocators, whos buffer types implement …\n<code>crate::wayland::compositor::Blocker</code> implementation for an …\nBuilder for Dmabufs\nPossible flags for a DMA buffer\nA mapping into a <code>Dmabuf</code>\nDmabuf mapping errors\nModes of mapping a dmabuf plane\n<code>Dmabuf</code>-based event source. Can be used to monitor implicit …\nDmabuf sync errors\nFlags for the <code>Dmabuf::sync_plane</code> operation\nEnd of read/write\nError type returned, if exporting fails\nThe buffer content is interlaced\nIo error during map operation\nIo error during sync operation\nMaximum amount of planes this implementation supports\nThe supplied index for the plane is out of bounds\nThe supplied index for the plane is out of bounds\nMap the dmabuf readable\nRead from the dmabuf\nStart of read/write\nMap the dmabuf writable\nWrite to the dmabuf\nWeak reference to a dmabuf handle\nThe buffer content is Y-inverted\nAdd a plane to the constructed Dmabuf\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nBuild a <code>Dmabuf</code> out of the provided parameters and planes\nCreate a new Dmabuf builder\nCreate a new Dmabuf by initializing with values from an …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nExport this buffer as a new Dmabuf\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nCreate an <code>calloop::EventSource</code> and …\nReturns raw handles of the planes of this buffer\nReturns if this buffer format has any vendor-specific …\nImport a Dmabuf using libgbm, creating a gbm Buffer Object …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nReturns true if there are not any strong references …\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nAccess the length of the mapping\nMap the plane at specified index with the specified mode\nCreates a new <code>DmabufSource</code> from a <code>Dmabuf</code> and interest.\nPresumably compatible device for buffer import\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe amount of planes this Dmabuf has\nReturns offsets for the planes of this buffer\nAccess the raw pointer of the mapping\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets or unsets any node set for this dmabuf (see …\nSets a known good node to import the dmabuf with.\nReturns strides for the planes of this buffer\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nSynchronize access for the plane at the specified index\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nTry to upgrade to a strong reference of this buffer.\nCreate a weak reference to this dmabuf\nReturns if the buffer is stored inverted on the y-axis\nLight wrapper around an <code>DrmDeviceFd</code> to implement the …\nWrapper around raw DumbBuffer handles.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRaw handle to the underlying buffer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>DumbAllocator</code> from a <code>DrmDeviceFd</code>.\nReturns the bits per pixel of the specified format.\nReturns the depth of the specified format.\nReturns the opaque alternative of the specified format.\nReturns the transparent alternative of the specified …\nReturns true if the format has an alpha channel.\nBuffer is going to be used as cursor\nBuffer is going to be used as cursor (deprecated)\nThe gbm device was destroyed\nLight wrapper around an <code>GbmDevice</code> to implement the …\nA GBM buffer object\nFlags to indicate the intended use for the buffer - these …\nErrors during conversion to a dmabuf handle from a gbm …\nAn open GBM device\nThe conversion returned an invalid file descriptor\nBuffer is linear, i.e. not tiled.\nBuffer is protected\nBuffer is to be used for rendering - for example it is …\nBuffer is going to be presented to the screen using an API …\nThe buffer consists out of multiple file descriptions, …\nBuffer can be used for <code>BufferObject::write()</code>.  This is …\nGet a flags value with all known bits set.\nGet the backend name\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nAllocate a buffer object for the given dimensions\nAllocate a buffer object for the given dimensions with …\nAllocate a buffer object for the given dimensions with …\nAlternative to <code>Allocator::create_buffer</code>, if you need a …\nAllocate a new surface object\nAllocate a new surface object with explicit modifiers\nAllocate a new surface object with explicit modifiers and …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nCreate a <code>GbmBuffer</code> from an existing <code>BufferObject</code>\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nCreate a GBM buffer object from a dma buffer\nCreate a GBM buffer object from a dma buffer with explicit …\nCreate a GBM buffer object from a wayland buffer\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nTest if a format is supported for a given set of usage …\nYield a set of contained flags values.\nYield a set of contained named flags values.\nOpen a GBM device from a given open DRM device.\nCreate a new <code>GbmAllocator</code> from a <code>GbmDevice</code> with some …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe image could not export a dmabuf since the allocator …\nThe image may be used in a color attachment.\nError type for <code>VulkanAllocator</code>.\nThe error type for exporting a <code>VulkanImage</code> as a <code>Dmabuf</code>.\nThe allocator could not export a dmabuf for an …\nFlags to indicate the intended usage for a buffer.\nThe size specified to create the buffer was too small.\nMaximum supported version instance version that may be …\nImage may be sampled in a shader.\nThe allocator could not be created.\nThe image may be the destination of a transfer command.\nThe image may be the source of a transfer command.\nThe specified format is not supported.\nSome error from the Vulkan driver.\nVulkan API error.\nAn allocator which uses Vulkan to create buffers.\nVulkan image object.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nTry to create a buffer with the given dimensions, pixel …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nFormat conversions between Vulkan and DRM formats.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nReturns whether this allocator supports the specified …\nYield a set of contained flags values.\nYield a set of contained named flags values.\nCreates a <code>VulkanAllocator</code>.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns the <code>PhysicalDevice</code> this allocator was created with.\nThe intersection of a source flags value with the …\nReturns the list of device extensions required by the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nConverts a FourCC format code to a Vulkan format code.\nReturns all the known format conversions.\nThe <code>DrmDevice</code> encountered an access error\nError exporting as Dmabuf\nThe given crtc is already in use by another surface\nDevice is currently paused\nDRM access error\nAn open drm device\nRef-counted file descriptor of an open drm device\nEven source of <code>DrmDevice</code>\nErrors thrown by the <code>DrmDevice</code> and the <code>DrmSurface</code>.\nError accessing the drm device\nEvents that can be generated by a DrmDevice\nTiming metadata for page-flip events\nEither a realtime or monotonic timestamp\nUnable to acquire DRM master\nAn open crtc + plane combination that can be used for …\nAn error happened while processing events\nThe supported pixel formats of the renderer and plane are …\nCommon framebuffer operations\nSimplified abstraction of a swapchain for gbm-buffers …\nErrors thrown by a <code>GbmBufferedSurface</code>\nError importing the rendered buffer to libgbm for scan-out\nFailed to renderer using the given renderer\nMode is not compatible with all given connectors\nMonotonic time stamp\nNo buffer to queue\nThe given plane does not allow to clear the framebuffer\nThe swapchain is exhausted, you need to call …\nThe given configuration does not specify a plane which is …\nNo encoder was found for a given connector on the set crtc\nNo supported pixel format for the given plane could be …\nNo supported pixel format for the given renderer could be …\nThe given plane is not a primary plane and therefor not …\nA claim of a plane\nConfiguration for a single plane\nHelper for <code>FB_DAMAGE_CLIPS</code>\nInfo about a single plane\nThe given plane cannot be used with the given crtc\nState of a single plane\nA set of planes as supported by a crtc\nRealtime time stamp\nThis operation would result in a surface without …\nAtomic Test failed for new properties\nUnable to determine device id of drm device\nThe DrmDevice is missing a required property\nThe configuration is not supported on the given plane\nA vblank blank event on the provided crtc has happened\nActivates a previously paused device.\nTries to add a new <code>connector</code> to be used after the next …\nTries to add a new <code>connector</code> to be used after the next …\nAlpha value for the plane\nReturns the underlying blob\nClaim a plane so that it won’t be used by a different …\nClaim a plane so that it won’t be used by a different …\nDisables the given plane.\nCommit the pending state rendering a given set of …\nReturns true whenever any state changes are pending to be …\nComposition for <code>Element</code>s using drm planes\nConfiguration for that plane\nCreates a new rendering surface.\nThe crtc the claim was taken for\nReturns the underlying <code>crtc</code> of this surface\nReturns the underlying <code>crtc</code> of this surface\nReturns a list of crtcs for this device\nCurrently used <code>connector</code>s of this <code>Surface</code>\nCurrently used <code>connector</code>s of this surface\nReturns the currently active <code>Mode</code> of the underlying <code>crtc</code>   …\nReturns the currently active <code>Mode</code> of the underlying <code>crtc</code>\nThe cursor plane of the crtc, if available\nReturns the size of the hardware cursor\nDamage clips of the attached framebuffer\nReturns the <code>dev_t</code> of the underlying device\nReturns the underlying <code>DeviceFd</code>\nReturns the underlying file descriptor\nReturns the underlying <code>DrmDeviceFd</code>\nReturns the device_id of the underlying drm node\nDestination <code>Rectangle</code> on the CRTC\nUtilities to attach <code>framebuffer::Handle</code>s to dumb buffers\nFramebuffer handle\nOptional fence\nRetrieve the format of the framebuffer\nGet the format of the underlying swapchain\nFormats supported by this plane\nMarks the current frame as submitted.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitialize damage clips for a a plane\nUtilities to attach <code>framebuffer::Handle</code>s to gbm backed …\nHandle of the plane\nHandle of the plane\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns if the device is currently paused or not.\nReturns if the underlying device is currently paused or …\nReturns if the underlying implementation uses …\nReturns whether this surface is using the legacy api\nCreate a new <code>DrmDeviceFd</code>.\nCreate a new <code>DrmDevice</code> from an open drm node\nCreate a new <code>GbmBufferedSurface</code> from a given compatible …\nRetrieves the next buffer to be rendered into and it’s …\nModule for abstractions on drm device nodes\nOverlay planes supported by the crtc, if available\nPage-flip the underlying <code>crtc</code> to a new given set of …\nPauses the device.\nReturns the pending <code>connector</code>s used for the next frame …\nReturns the pending <code>connector</code>s used after the next <code>commit</code> …\nReturns the currently pending <code>Mode</code> to be used after the …\nReturns the currently pending <code>Mode</code> to be used after the …\nThe plane the claim was taken for\nReturns the underlying <code>plane</code> of this surface\nReturns the underlying primary <code>plane</code> of this surface\nReturns a set of available planes for a given crtc\nReturns a set of available planes for this surface\nThe primary plane of the crtc (automatically selected for …\nQueues the current buffer for rendering.\nTries to mark a <code>connector</code> for removal on the next commit.  …\nTries to mark a <code>connector</code> for removal on the next commit.\nReset the age for all buffers.\nReset the underlying buffers\nReset the state of this device\nRe-evaluates the current state of the crtc.\nThe sequence number of the frame\nTries to replace the current connector set with the newly …\nTries to replace the current connector set with the newly …\nUnderlying device error\nSource <code>Rectangle</code> of the attached framebuffer\nReturns a reference to the underlying drm surface\nTest a state given a set of framebuffers.\nThe time the frame flip happend\nTransform for the attached framebuffer\nType of the plane\nTries to set a new <code>Mode</code> to be used after the next commit.\nTries to set a new <code>Mode</code> to be used after the next commit.\nz-position of the plane if available\nConnector\nCRTC\nProperty handle\nProperty name\nA <code>Allocator</code> buffer\nError during buffer allocation\nError during exporting the buffer as dmabuf\nError for <code>RenderFrameResult::blit_frame_result</code>\nComposite an output using a combination of planes and …\nError accessing the drm device\nAn element has been assigned for direct scan-out\nThe frame is empty\nType of the error\nA error occurred during exporting the buffer\nPossible buffers to export as a framebuffer using …\nExport a <code>ExportBuffer</code> as a framebuffer\nErrors thrown by a <code>DrmCompositor</code>\nType of the framebuffer\nError during exporting a framebuffer\nNo framebuffer available\nThe swapchain is exhausted, you need to call …\nNo supported pixel format for the given plane could be …\nNo supported pixel format for the given renderer could be …\nPreparing the frame encountered an error\nFailed to claim the primary plane\nDefines the element for the primary plane\nDefines the element for the primary plane in cases where a …\nRendering the frame encountered en error\nError returned from <code>DrmCompositor::render_frame</code>\nResult for <code>DrmCompositor::render_frame</code>\nA render error occurred\nA slot from the swapchain was used for rendering the …\nA wayland buffer\nTries to add a new <code>connector</code> to be used after the next …\nAdd a framebuffer for the specified buffer\nBlit the frame result into a currently bound buffer\nAccess the underlying swapchain buffer\nTest if the provided buffer is eligible for adding a …\nReturns the underlying <code>crtc</code> of this surface\nCurrently used <code>connector</code>s of this <code>Surface</code>\nReturns the currently active <code>Mode</code> of the underlying <code>crtc</code>\nOptional cursor plane element\nThe damage on the primary plane\nGet the damage of this frame for the specified dtr and age\nReturns the current enabled <code>DebugFlags</code>\nImplementation for ExportFramebuffer and related utilizies …\nGet the format of the underlying swapchain\nMarks the current frame as submitted.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nImplementation for ExportFramebuffer and related utilizies …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf this frame contains any changes and should be submitted\nReturns if synchronization with kms submission can’t be …\nInitialize a new <code>DrmCompositor</code>.\nOverlay elements in front to back order\nReturns the pending <code>connector</code>s used for the next frame …\nReturns the currently pending <code>Mode</code> to be used after the …\nReturns the underlying <code>plane</code> of this surface\nElement for the primary plane\nQueues the current frame for scan-out.\nTries to mark a <code>connector</code> for removal on the next commit.\nRender the next frame\nReset the age for all buffers.\nReset the underlying buffers\nRe-evaluates the current state of the crtc and forces …\nTries to replace the current connector set with the newly …\nSet the <code>DebugFlags</code> to use\nChange the output mode source.\nThe render element states of this frame\nReturns a reference to the underlying drm surface\nSync point\nThe transform applied during rendering\nEnable or disable direct scanout.\nTries to set a new <code>Mode</code> to be used after the next commit.\nFailed to add a framebuffer for the dumb buffer\nPossible errors for attaching a <code>framebuffer::Handle</code>\nThe buffer is not supported\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA GBM backed framebuffer\nAttach a <code>framebuffer::Handle</code> to an <code>DumbBuffer</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFailed to add a framebuffer for the bo\nPossible errors for attaching a <code>framebuffer::Handle</code>\nA GBM backed framebuffer\nImporting the <code>Dmabuf</code> to gbm failed\nAttach a <code>framebuffer::Handle</code> to an [<code>BufferObject</code>]\nAttach a framebuffer for a <code>Dmabuf</code>\nAttach a framebuffer for a <code>WlBuffer</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA control node may be used for mode-setting.\nAn error that may occur when creating a DrmNode from a …\nA node which refers to a DRM device.\nSome underlying IO error occured while trying to create a …\nA type of node\nThe provided file descriptor does not refer to a DRM node.\nA primary node may be used to allocate buffers.\nA render node may be used by a client to allocate buffers.\nReturns the device_id of the underlying DRM node.\nReturns the path of a specific type of node from the DRM …\nReturns the path of the open device if possible.\nReturns the path of the specified node type matching the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a DRM node from a dev_t\nCreates a DRM node from an open drm device.\nCreates a DRM node from path.\nCreates a DRM node from a file stat.\nReturns whether the DRM device has render nodes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns if the given device by major:minor pair is a drm …\nReturns the major device number of the DRM device.\nReturns the minor device number of the DRM device.\nReturns a string representing the prefix of a minor device…\nReturns the path of a specific type of node from the same …\nReturns a new node of the specified node type matching the …\nReturns the path of a specific type of node from the same …\nReturns the type of the DRM node.\nEGL cannot access a requested resource (for example a …\nEGL failed to allocate resources for the requested …\nAn unrecognized attribute or attribute value was passed in …\nAn EGLConfig argument does not name a valid EGL frame …\nAn EGLContext argument does not name a valid EGL rendering …\nThe current surface of the calling thread is a window, …\nAn EGLDevice argument is not valid for this display.\nAn EGLDisplay argument does not name a valid EGL display …\nArguments are inconsistent (for example, a valid context …\nA NativePixmapType argument does not refer to a valid …\nA NativeWindowType argument does not refer to a valid …\nOne or more argument values are invalid.\nAn EGLSurface argument does not name a valid surface …\nError that can occur when accessing an EGL buffer\nFailed to configure the EGL context\nA power management event has occurred. The application …\nThe corresponding Context is not alive anymore\nContext creation failed as one or more requirements could …\nThis buffer has been destroyed\nDisplay creation failed\nUnable to obtain a valid EGL Display\nDisplay query result invalid\nFailed to create <code>Dmabuf</code> from the image\nImages of the EGL-based <code>WlBuffer</code>.\nEGL error during surface creation\nsafe EGLDevice wrapper\nRaw EGL error\nFailed to create <code>EGLImage</code> from the buffer\nFailed to create <code>EGLBuffer</code> from the buffer\nEGL error during <code>eglSwapBuffers</code>\nThe required EGL extension is not supported by the …\nThe required EGL extension is not supported by the …\nError that can happen on optional EGL features\nThe device does not have the given property\nEGL errors\nExternal format\nTexture format types\n<code>eglInitialize</code> returned an error\nError that can happen when making a context (and surface) …\nNo available pixel format matched the criteria\nNo EGLDisplay is currently bound to this <code>WlDisplay</code>\nBackend does not match the context type\nEGL is not initialized, or could not be initialized, for …\nThis buffer is not managed by the EGL buffer\nThe requested OpenGL version is not supported\nThe EGL implementation does not support creating OpenGL ES …\nOnly one EGLDisplay may be bound to a given <code>WlDisplay</code> at …\nIndex of plane is out of bounds for <code>EGLImage</code>\nFailed to query device properties\nFailed to query the available <code>EGLDevice</code>s\nRGB format\nRGB + alpha channel format\nThe EGL operation failed due to temporary unavailability …\nError that can happen when swapping buffers.\nAn unknown error\nWe currently do not support multi-planar buffers\nWaiting on a fence failed\n2-plane Y and UV format\n3-plane Y, U and V format\n2-plane Y and XUXV format\nEGL context related structs\nReturns the <code>EGLDevices</code> related to the given <code>EGLDisplay</code>.\nType safe native types for safe egl initialisation\nReturns the path to the drm node of this EGLDevice.\nReturns an iterator which enumerates over the available …\nReturns a list of extensions the device supports.\nEGL fence related structs\nFormat of these images\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the pointer to the raw <code>EGLDevice</code>.\nReturns the address of an OpenGL function.\nReturns the <code>EGLImage</code> handle for a given plane\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the underlying images\nType safe native types for safe context/surface creation\nAmount of planes this format uses\nAmount of planes of this EGLBuffer\nReturns the path to the render node of this EGLDevice.\nSize of the buffer\nEGL surface related structs\nReturns the drm node beloging to this device. Tries to …\nWraps a raw egl call and returns error codes from …\nWraps a raw egl call and returns error codes from …\nWraps a raw egl call and returns error codes from …\nIf the y-axis is inverted or not\nInclude all the immediate functions and definitions.\nDefines the priority for an <code>EGLContext</code>\nInclude all the future-compatible functions and …\nEGL context for rendering\nAttributes to use when creating an OpenGL context.\nDescribes the requested OpenGL context profiles.\nHigh priority\nLow priority\nMedium priority\nDescribes how the backend should choose a pixel format.\nFormat selection to get a 10-bit color format with alpha, …\nFormat selection to get a 10-bit color format based on …\nFormat selection to get a 8-bit color format with alpha, …\nMinimum number of bits for the alpha in the color buffer. …\nMinimum number of bits for the color buffer, excluding …\nReturns the egl config for this context\nAppend the requirements to the given attribute list\nWhether to enable the debug flag of the context.\nMinimum number of bits for the depth buffer. <code>None</code> means “…\nReturns the display which created this context.\nReturns a list of formats for dmabufs that can be rendered …\nReturns a list of formats for dmabufs that can be used as …\nIf <code>true</code>, the color buffer must be in a floating point …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>EGLContext</code> from raw handles.\nGet a raw handle to the underlying context.\nIf <code>true</code>, only hardware-accelerated formats will be …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the OpenGL context is the current one in …\nMakes the OpenGL context the current context in the …\nMakes the OpenGL context the current context in the …\nMakes the OpenGL context the current context in the …\nContains the minimum number of samples per pixel in the …\nCreates a new configless <code>EGLContext</code> from a given <code>EGLDisplay</code>\nCreate a new configless <code>EGLContext</code> from a given <code>EGLDisplay</code> …\nCreate a new <code>EGLContext</code> from a given <code>EGLDisplay</code> and …\nCreate a new <code>EGLContext</code> with the specified priority from a …\nCreate a new configless <code>EGLContext</code> with the specified …\nCreate a new <code>EGLContext</code> from a given <code>EGLDisplay</code> and …\nCreate a new <code>EGLContext</code> from a given <code>EGLDisplay</code>, …\nCreates a new configless <code>EGLContext</code> with the specified …\nReturns the pixel format of the main framebuffer of the …\nOpenGL profile to use.\nMinimum number of bits for the depth buffer. <code>None</code> means “…\nUnbinds this context from the current thread, if set.\nRetrieve user_data associated with this context\nDescribes the OpenGL API and version that are being …\nWhether to use vsync. If vsync is enabled, calling …\nDenotes if damage tracking is supported.\nType to receive <code>EGLBuffer</code> for EGL-based <code>WlBuffer</code>s.\n<code>EGLDisplay</code> represents an initialised EGL environment\nWrapper around <code>ffi::EGLDisplay</code> to ensure display is only …\n<code>EGL_EXT_swap_buffers_with_damage</code>\n<code>EGL_KHR_swap_buffers_with_damage</code>\nSome required extensions are missing\nDescribes the pixel format of a framebuffer\nnumber of bits used for alpha channel\nBinds this EGL display to the given Wayland display.\nFinds a compatible EGLConfig for a given set of …\nnumber of bits used for colors\nExports an <code>EGLImage</code> as a <code>Dmabuf</code>\nImports a <code>Dmabuf</code> as an <code>EGLImage</code>\nnumber of bits used for depth channel\nReturns a list of formats for dmabufs that can be rendered …\nReturns a list of formats for dmabufs that can be used as …\nTry to receive <code>EGLBuffer</code> from a given <code>WlBuffer</code>.\nTry to receive the dimensions of a given <code>WlBuffer</code>.\nReturns if the <code>EGLBuffer</code> has an alpha channel\nReturns the supported extensions of this display\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>EGLDisplay</code> from an already initialized …\nGet a handle to the underlying raw EGLDisplay handle\nReturns the runtime egl version of this display\nffi EGLDisplay ptr\nis the format hardware accelerated\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nnumber of samples used for multisampling if enabled\nCreate a new <code>EGLDisplay</code> from a given <code>EGLNativeDisplay</code>.\nis srgb enabled\nnumber of bits used for stencil buffer\nis stereoscopy enabled\nReturns true, if any valid combination of required …\nReturns when the display supports extensions required for …\nA EGL fence\nBlocks the current thread until the fence is signaled or …\nCreate a new egl fence\nExport this <code>EGLFence</code> as a native fence fd\nReturns the argument unchanged.\nImport a native fence fd\nCalls <code>U::from(self)</code>.\nIndicates if this fence represents a native fence\nReturns whether the display supports creating fences from …\nTries to insert the fence in the current bound client …\nModule containing raw egl function bindings\nLoads libEGL symbols, if not loaded already. This normally …\nFallbacks: ClientWaitSyncKHR\nFallbacks: CreateSync64KHR\nFallbacks: DestroyImageKHR\nFallbacks: DestroySyncKHR\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad each OpenGL symbol using a custom load function. This …\nCreates a <code>FnPtr</code> from a load attempt.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrait describing platform specific functionality to create …\nTrait for types returning valid surface pointers for …\nType, Raw handle and attributes used to call …\nShallow type for the EGL_PLATFORM_SURFACELESS with default …\nShallow type for EGL_PLATFORM_X11_EXT with the default X11 …\nTyped Xlib window for the <code>X11</code> backend\nAttributes used to call <code>eglGetPlatformDisplayEXT</code>\nCreate an EGLSurface from the internal native type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nString identifying this native display from its …\nString identifying this native surface from its …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRaw native display handle used to call …\nWill be called to check if any internal resources will need\nCreate a <code>EGLPlatform&lt;&#39;a&gt;</code> for the provided platform.\nPlatform type used to call <code>eglGetPlatformDisplayEXT</code>\nHuman readable name of the platform\nRequired extensions to use this platform\nIf the surface supports resizing you may implement and use …\nList of supported platforms that can be used to create a …\nType of surfaces created\nAdds additional semantics when calling …\nEGL surface of a given EGL context for rendering\nReturns the buffer age of the underlying back buffer\nReturns the egl config for this context\nReturns the argument unchanged.\nReturns the size of the underlying back buffer\nGet a raw handle to the underlying surface\nCalls <code>U::from(self)</code>.\nReturns true if the OpenGL surface is the current one in …\nCreate a new <code>EGLSurface</code>.\nReturns the pixel format of the main framebuffer of the …\nTries to resize the underlying native surface.\nSwaps buffers at the end of a frame.\nInput event with absolute location data.\nAn airbrush-like tool.\nAxis when scrolling\nDirection of physical motion that caused pointer axis event\nSource of an axis when scrolling\nBack mouse button.\nA paintbrush-like tool.\nState of a button on a pointer device, like mouse or …\nContinuous scrolling device. Almost identical to <code>Finger</code>\nDistance axis\nTrait for generic functions every input device does provide\nType representing input devices\nAn input device was connected\nSet of input types a device may provide\nAn input device was disconnected\nTouching the surface\nEraser\nTrait for generic functions every input event does provide\nFinger. Mostly used for trackpads.\nForward mouse button.\nTrait for gesture begin events.\nTrait for gesture end events.\nA pointer hold gesture began\nTrait for gesture hold begin event.\nType representing hold begin events of pointer devices\nA pointer hold gesture ended\nTrait for gesture hold end event.\nType representing hold end events of pointer devices\nA pointer pinch gesture began\nTrait for gesture pinch begin event.\nType representing pinch begin events of pointer devices\nA pointer pinch gesture ended\nTrait for gesture pinch end event.\nType representing pinch end events of pointer devices\nA pointer pinch gesture updated\nTrait for gesture pinch update event.\nType representing pinch update events of pointer devices\nA pointer swipe gesture began\nTrait for gesture swipe begin event.\nType representing swipe begin events of pointer devices\nA pointer swipe gesture ended\nTrait for gesture swipe end event.\nType representing swipe end events of pointer devices\nA pointer swipe gesture updated\nTrait for gesture swipe update event.\nType representing swipe update events of pointer devices\nHorizontal axis\nPhysical motion matches axis direction\nIn proximity\nTrait that describes objects providing a source of input …\nDifferent events that can be generated by an input backend\nPhysical motion is inverse of axis direction (e.g. natural …\nState of key on a keyboard. Either pressed or released\nA keyboard event occurred\nTrait for keyboard event\nType representing keyboard events\nLeft mouse button\nA mouse tool with a lens.\nThe laptop lid was closed when the <code>SwitchState</code> is <code>On</code>, or …\nMiddle mouse button\nA mouse bound to the tablet.\nA particular mouse button\nSwitch is off\nSwitch is on\nOut of proximity\nPressure axis\nA generic pen.\nPhysical drawing tool, e.g. Wacom Inking Pen\nA pointer action occurred while scrolling on an axis\nTrait for pointer events generated by scrolling on an axis.\nType representing axis events on pointer devices\nA pointer button was pressed or released\nCommon methods pointer event generated by pressed buttons …\nType representing button events on pointer devices\nA relative pointer motion occurred\nAn absolute pointer motion occurs\nTrait for pointer events generated by absolute device …\nType representing motion events of pointer devices\nTrait for pointer events generated by relative device …\nType representing motion events of pointer devices\nKey is pressed\nButton is pressed\nThe state of proximity for a tool on a device.\nZ-rotation axis\nKey is released\nButton is released\nRight mouse button\nSlider axis\nSpecial event specific of this backend\nSpecial events that are custom to this backend\nTypes of Switches\nState of a Switch\nA switch was toggled\nTrait for switch toggle events\nType representing switch toggle events\nTilt axes\nThis switch indicates whether the device is in normal …\nA tablet tool axis was emitted\nTrait for axis tablet tool events.\nType representing axis events on tablet devices\nA tablet tool button was pressed or released\nSignals that a tool has changed a logical button state on …\nType representing button events on tablet tool devices\nDescribes extra capabilities on a tablet.\nDescription of physical tablet tool\nTablet tool event\nA tablet tool proximity was emitted\nTrait for tablet tool proximity events.\nType representing proximity events on tablet devices\nA tablet tool tip event was emitted\nSignals that a tool has come in contact with the surface …\nType representing tip events on tablet devices\nThe tip contact state for a tool on a device.\nDescribes the physical type of tool. The physical type of …\nA rotary device with positional and rotation data.  \nA touch sequence was cancelled\nTrait for touch events canceling the chain\nType representing canceling of touch events\nA new touchpoint appeared\nTrait for touch events starting at a given position.\nType representing touch events starting\nTrait with functions available for all touch events.\nA touch frame was emitted\nTrait for touch frame events\nType representing touch frame events\nA touchpoint moved\nTrait for touch events regarding movement on the screen\nType representing touch events from moving\nSlot of a different touch event.\nA touchpoint was removed\nTrait for touch events finishing.\nType representing touch events ending\nType of the device is not known or does not match any …\nUsed to mark events never emitted by an <code>InputBackend</code> …\nNot touching the surface\nVertical axis\nWheel axis\nScroll wheel.\nScrolling through tilting the scroll wheel.\nGet a flags value with all known bits set.\nAmount of scrolling in pixels on the given <code>Axis</code>.\nAmount of scrolling in discrete steps on the given <code>Axis</code>.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturn the button that triggered this event.\nPressed button of the event.\nReturns the numerical button code of the mouse button.\nReturn the button state of the event.\nTrue if event was cancelled.\nTool capabilities Notifies the client of any capabilities …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nTotal number of keys pressed on all devices on the …\nDelta between the last and new pointer device position …\nDelta between the last and new pointer device position …\nDelta between the last and new gesture center.\nDelta between the last and new gesture center.\nDelta between the last and new pointer device position …\nUnaccelerated delta between the last and new pointer …\nDelta on the x axis between the last and new pointer …\nDelta of center on the x axis from last begin/update.\nDelta of center on the x axis from last begin/update.\nDelta on the x axis between the last and new pointer …\nUnaccelerated delta on the x axis between the last and new …\nDelta on the y axis between the last and new pointer …\nDelta of center on the y axis from last begin/update.\nDelta of center on the y axis from last begin/update.\nDelta on the y axis between the last and new pointer …\nUnaccelerated delta on the y axis between the last and new …\nReturns the device, that generated this event\nThe intersection of a source flags value with the …\nReturns the current distance from the tablet’s sensor, …\nCheck if the distance axis was updated in this event.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nNumber of fingers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nHardware id in Wacom’s format\nUnique hardware serial number of the tool\nTest if this device has a specific capability\nUnique id of a single device at a point in time.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nReturns the numerical button code of the keyboard button.\nHuman-readable name of the device\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nTool position in the device’s native coordinate space\nTool position in the device’s native coordinate space\nDevice position in it’s original coordinate space.\nTool position converted into the target coordinate space.\nTool position converted into the target coordinate space.\nDevice position converted to the targets coordinate space. …\nReturns the current pressure being applied on the tool in …\nCheck if the pressure axis was updated in this event.\nRelative direction of physical motion.\nThe intersection of a source flags value with the …\nReturns the current z rotation of the tool in degrees, …\nRelative angle in degrees from last begin/update.\nCheck if the z-rotation axis was updated in this event.\nAbsolute scale compared to begin event.\nFor the button of a TabletToolButtonEvent, return the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCheck if the slider axis was updated in this event.\nReturns the current position of the slider on the tool, …\nMulti-touch slot identifier.\nSource of the scroll event.\nReturns the new proximity state of a tool from a proximity …\nState of the key\nState of the button\n<code>State</code> of the switch\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\n<code>Switch</code> which triggered the event\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns the syspath of the device.\nReturns the current tilt along the (X,Y) axis of the tablet…\nReturns the current tilt along the (X,Y) axis of the tablet…\nCheck if the tilt was updated in this event.\nCheck if the tilt was updated in this event.\nReturns the current tilt along the X axis of the tablet’…\nCheck if the tilt x axis was updated in this event.\nReturns the current tilt along the Y axis of the tablet’…\nCheck if the tilt y axis was updated in this event.\nTimestamp in microseconds, with an undefined base.\nTimestamp in milliseconds\nReturns the new tip state of a tool from a tip event.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nGet tablet tool that caused this event\nThe tool type is the high-level type of the tool and …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns device USB (product,vendor) id\nReturn the delta for the wheel in degrees.\nReturn the delta for the wheel in discrete steps (e.g. …\nCheck if the wheel axis was updated in this event.\nReturns the x coordinate of the tablet tool, in mm from …\nDevice x position in it’s original coordinate space.\nReturn the current absolute X coordinate of the tablet …\nDevice x position converted to the targets coordinate space…\nReturns the y coordinate of the tablet tool, in mm from …\nDevice y position in it’s original coordinate space.\nReturn the current absolute Y coordinate of the tablet …\nDevice y position converted to the targets coordinate space…\nThe added device\nThe removed device\nThe keyboard event\nThe pointer motion event\nThe absolute pointer motion event\nThe pointer button event\nThe pointer axis event\nThe gesture event\nThe gesture event\nThe gesture event\nThe gesture event\nThe gesture event\nThe gesture event\nThe gesture event\nThe gesture event\nThe touch down event\nThe touch motion event\nThe touch up event\nThe touch cancel event\nThe touch frame event\nThe tablet tool axis event\nThe tablet tool proximity  event\nThe tablet tool axis event\nThe pointer button event\nThe switch toggle event\nContinuous scroll event\nScroll event from pointer finger\nLibinput based <code>InputBackend</code>.\nWrapper for types implementing the <code>Session</code> trait to provide\nGeneric pointer scroll event from libinput\nScroll event from pointer wheel\nReturns a reference to the underlying libinput context\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitialize a new <code>LibinputInputBackend</code> from a given already …\nAbstraction for Renderers, that can render into different …\nTrait for renderers supporting blitting contents from one …\nBuffer type of a given wl_buffer, if managed by smithay\nDebug flags that can be enabled at runtime\nBuffer is managed by the <code>crate::wayland::dmabuf</code> global\nBuffer is managed by a currently initialized …\nError type returned by the rendering operations of this …\nError type returned by the rendering operations of this …\nTrait for renderers supporting exporting contents of …\nHelper trait for <code>Renderer</code>, which defines a rendering api …\nType representing a currently in-progress frame during the …\nCommon trait for renderers of any wayland buffer type\nTrait for Renderers supporting importing dmabufs.\nTrait for Renderers supporting importing dmabuf-based …\nTrait for Renderers supporting importing wl_drm-based …\nTrait for Renderers supporting importing bitmaps from …\nTrait for Renderers supporting importing wl_buffers using …\nReturns the value of the texture element that is nearest …\nReturns the weighted average of the four texture elements …\nTrait for renderers that support creating offscreen …\nAbstraction of commonly used rendering operations for …\nBuffer is managed by the <code>crate::wayland::shm</code> global\nTint all rendered textures\nA two dimensional texture\nTexture filtering methods\nTexture Handle type used by this renderer.\nTexture Handle type used by this renderer.\nA downloaded texture buffer\nTexture type representing a downloaded pixel buffer.\nFunctionality to unbind the current rendering target\nGet a flags value with all known bits set.\nBind a given rendering target, which will contain the …\nBinds the underlying EGL display to the given Wayland …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nCopies the contents of <code>src</code> in Target to <code>dst</code> of the current …\nCopies the contents of <code>src</code> in the current bound …\nReturns the dimensions of a wl_buffer\nReturns if the buffer has an alpha channel\nReturns the <em>type</em> of a wl_buffer\nReturns if the underlying buffer is y-inverted\nReturns whether the renderer should be able to read-back …\nClear the complete current target with a single given …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nCopies the contents of the currently bound framebuffer.\nCopies the contents of the passed texture. <em>Note</em>: This …\nCreate a new instance of a framebuffer.\nHelper for effective output damage tracking\nReturns the current enabled <code>DebugFlags</code>\nThe intersection of a source flags value with the …\nReturns supported formats for dmabufs.\nSet the filter method to be used when rendering a texture …\nDraw a solid color to the current target at the specified …\nReturns the underlying <code>EGLBufferReader</code>.\nCommon base for elements that can be drawn by a <code>Renderer</code>\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nFinish this <code>Frame</code> returning any error that may happen …\nReturns if the mapped buffer is flipped on the y-axis …\nFormat of the texture, if available.\nFormat of the texture\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nImplementation of the rendering traits using OpenGL ES 2\nIntegration for using <code>glow</code> on top of smithays OpenGL ES 2 …\nTest if a specific dmabuf <code>Format</code> is supported\nHeight of the texture plane\nReturns an id, that is unique to all renderers, that can …\nReturns an id, that is unique to all renderers, that can …\nImport a given buffer into the renderer.\nImport a given dmabuf-based buffer into the renderer (see …\nImport a given raw dmabuf into the renderer.\nImport a given wl_drm-based buffer into the renderer (see …\nImport a given chunk of memory into the renderer.\nImport a given shm-based buffer into the renderer (see …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nReturns a read-only pointer to a previously created …\nReturns supported formats for memory imports.\nThis module aims to make multi-gpu setups easier to handle …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nImplementation of the rendering traits using pixman\nThe intersection of a source flags value with the …\nInitialize a rendering context on the current rendering …\nRender a texture to the current target as a flat 2d-plane …\nRender part of a texture as given by src to the current …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet the enabled <code>DebugFlags</code>\nReturns supported formats for shared memory buffers.\nSize of the texture plane\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nSupported pixel formats for given targets, if applicable.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nHelper for synchronizing rendering operations\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nOutput transformation that is applied to this frame\nUnbind the current rendering target.\nUnbinds a previously bound egl display, if existing.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nUpdate a portion of a given chunk of memory into an …\nSet the filter method to be used when rendering a texture …\nUtility module for helpers around drawing <code>WlSurface</code>s and …\nWait for a <code>SyncPoint</code> to be signaled\nWait for a <code>SyncPoint</code> to be signaled\nWidth of the texture plane\nErrors thrown by <code>OutputDamageTracker::render_output</code>\nDamage tracker for a single output\nThe given <code>Output</code> has no mode set\nRepresents the result from rendering the output\nThe provided <code>Renderer</code> returned an error\nHolds the damage from the rendering operation\nDamage this output and return the damage without actually …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitialize a new <code>OutputDamageTracker</code> from an …\nInitialize a new <code>OutputDamageTracker</code> from an <code>Output</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the <code>OutputModeSource</code> of the <code>OutputDamageTracker</code>\nInitialize a static <code>OutputDamageTracker</code>\nRender this output with the provided <code>Renderer</code>\nRender this output with the provided <code>Renderer</code> in the …\nHolds the render element states\nHolds the sync point of the rendering operation\nTypes that can be converted into <code>RenderElement</code>s\nThe element represents a cursor\nA single element\nThe element buffer format is unsuited for direct scan-out\nA unique id for a <code>RenderElement</code>\nDefines the kind of an <code>Element</code>\nA memory backed buffer\nHolds the primary scanout output for a surface\nA single render element\nType of the render element\nDefines the presentation state of an element after …\nDefines the element render state after rendering\nHolds the states for a set of <code>RenderElement</code>s\nThe element was selected for rendering\nDefines the (optional) reason why a <code>Element</code> was selected …\nElement was selected for direct scan-out but failed\nThe element was skipped as it is current not visible\nThe underlying storage for a element\nThe element kind is unspecified\nA wayland buffer\nNew-type wrapper for wrapping owned elements in …\nThe element was selected for zero-copy scan-out\nReturns an alpha value the element should be drawn with …\nGet the current commit position of this element\nGets the current primary scanout output if any\nGet the damage since the provided commit relative to the …\nDefault function for primary scan-out selection\nDraw this element\nReturn the <code>RenderElementState</code> for the specified <code>Id</code>\nReturns whether the element with the specified id was …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an id from a <code>Resource</code>\nGet the geometry relative to the output\nGet the unique id of this element\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the <code>Kind</code> for this element\nGet the location relative to the output\nElement to render from RGBA memory\nCreate a new unique id\nGet the opaque regions of the element relative to the …\nHolds the presentation state of the element on the output\nReturns render elements for a given position and scale\nAggregate multiple types implementing <code>RenderElement</code> into a …\nElement to render a solid color\nGet the src of the underlying buffer\nHolds the render states of the elements\nElement to render a wayland surface\nElement to render a texture\nGet the transform of the underlying buffer\nGet the underlying storage of this element, may be used to …\nUpdate the primary scan-out output from <code>RenderElementStates</code>\nUtilities and helpers around the <code>Element</code> trait.\nHolds the physical visible area of the element on the …\nOptional reason why the element was selected for rendering\nA buffer storing pixel data backed by system memory\nA memory backed render buffer\nA render element for <code>MemoryRenderBuffer</code>\nA render context for <code>MemoryRenderBuffer</code>\nDraw to the buffer\nGet the format of this buffer\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>MemoryRenderBufferRenderElement</code> for a …\nInitialize a <code>MemoryRenderBuffer</code> from an existing …\nCreate a new memory buffer from a slice with the specified …\nInitialize a <code>MemoryRenderBuffer</code> from a slice\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new zeroed memory buffer with the specified …\nInitialize a empty <code>MemoryRenderBuffer</code>\nRender to the memory buffer\nResize this buffer to the size specified\nResize the buffer\nGet the size of this buffer\nGet the stride of this buffer\nUpdate the opaque regions\nA single color buffer\n<code>Element</code> to render a solid color\nGet the current color of this buffer\nGet the current color of this element\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a render element from a <code>SolidColorBuffer</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitialize a new solid color buffer with the specified …\nCreate a new solid color render element with the specified …\nSet the new size of this solid color buffer\nSet a new color on this solid color buffer\nUpdate the size and color of this solid color buffer\nA single surface render element\nGet the buffer dimensions in logical coordinates\nReturns the argument unchanged.\nCreate a render element from a surface\nCalls <code>U::from(self)</code>.\nRetrieve the <code>WaylandSurfaceRenderElement</code>s for a surface …\nGet the buffer texture\nGet the view into the surface\nA render context for <code>TextureRenderBuffer</code>\nA single texture buffer\nA texture backed render buffer\nA render element for a <code>TextureRenderBuffer</code>\nDraw to the buffer\nFormat of the underlying texture\nFormat of the underlying texture\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate <code>TextureBuffer</code> from a chunk of memory\nCreate <code>TextureRenderBuffer</code> from a chunk of memory\nCreate a static <code>TextureRenderElement</code> from an existing …\nCreate a <code>TextureBuffer</code> from an existing texture\nCreate <code>TextureRenderBuffer</code> from an existing texture\nCreate a <code>TextureRenderElement</code> from a <code>TextureBuffer</code>\nCreate a <code>TextureRenderElement</code> from a <code>TextureRenderBuffer</code>\nCreate a <code>TextureRenderElement</code> from an existing texture and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRender to the texture\nUpdate the texture from a chunk of memory\nReplace the stored texture\nUpdate the opaque regions\nThe supplied location replaces the original location\nAlign to the bottom\nAlign to the bottom left\nAlign to the bottom left\nAlign to the center\nDefines how the elements should be aligned during constrain\nDefines the scale behavior for the constrain\nA element that allows to crop another element\nDo not scale, but cut off at the constrain size\nFit the element into the size, nothing will be cropped\nAlign to the left\nAlign to the right\nThe supplied location offsets the original location\nDefines how the location parameter should apply in …\nA element that allows to offset the location of an …\nA element that allows to re-scale another element\nAlways stretch the element to the constrain size\nAlign to the top\nAlign to the top left\nAlign to the top right\nZoom the element into the size, crops if the aspect ratio …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nConvenience function to constrain something that …\nConstrain render elements on a specific location with a …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nCreate a new re-scale element for an existing element\nCreate a cropping render element for an existing element\nCrate an re-locate element for an existing element\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nSelect a <code>DmabufFeedback</code> based on the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe given dmabuf could not be converted to an EGLImage for …\nGlesRenderer supports blitting between framebuffers\nThe blitting operation was unsuccessful\nThe given buffer was not accessible\nCapabilities of the <code>GlesRenderer</code>\nGlesRenderer supports color transformations\nThe underlying egl context could not be activated\nAn error occured while creating the shader object.\nDebug flags shader define\nGlesRenderer supports GL debug\nThe given egl buffer was not accessible\nRequired EGL extension are not supported by the underlying …\nExternal texture shader define\nGlesRenderer supports fencing,\nA framebuffer could not be bound\nRequired GL extension are not supported by the underlying …\nRequired GL functions could not be loaded\nRequired GL version is not available by the underlying …\nError returned during rendering using GL ES\nHandle to the currently rendered frame during …\nTexture mapping of a GLES2 texture\nGles pixel shader\nOffscreen render surface\nA renderer utilizing OpenGL ES\nGles texture shader\nA handle to a GLES texture\nGlesRenderer supports Instancing for render optimizations\nThere was an error mapping the buffer\n2x2 matrices\n2x2 matrices\n2x3 matrices\n2x3 matrices\n2x4 matrices\n2x4 matrices\n3x2 matrices\n3x2 matrices\n3x3 matrices\n3x3 matrices\n3x4 matrices\n3x4 matrices\n4x2 matrices\n4x2 matrices\n4x3 matrices\n4x3 matrices\n4x4 matrices\n4x4 matrices\nNo alpha shader define\nA program could not be linked\nGlesRenderer supports creating of Renderbuffers with …\nA shader could not be compiled\nBlocking for a synchronization primitive failed\nThe provided buffer’s size did not match the requested …\nA shader uniform variable consisting out of a name and …\nGL location and type of a uniform shader variable\nA description of a uniform shader variable consisting out …\nDifferent value types of a shader uniform variable for the …\nThe provided uniform has a different type then was …\nValue of a uniform variable\nThe given buffer has an unknown pixel format\nUnable to determine the size of the framebuffer\nUniform was not declared when compiling shader\nThe given buffer has an unsupported pixel format\nThe given buffer has an unknown pixel layout\nThe given wl buffer has an unsupported pixel format\nA single float\nA single float\nA single signed integer\nA single signed integer\nA single unsigned integer\nA single unsigned integer\nTwo floats\nTwo floats\nTwo signed integers\nTwo signed integers\nTwo unsigned integers\nTwo unsigned integers\nThree floats\nThree floats\nThree signed integers\nThree signed integers\nThree unsigned integers\nThree signed integers\nFour floats\nFour floats\nFour signed integers\nFour signed integers\nFour unsigned integers\nFour signed integers\nReturns the supported <code>Capabilities</code> of this renderer.\nReturns the supported <code>Capabilities</code> of the underlying …\nResets a texture shader override previously set by …\nCompile a custom pixel shader for rendering with …\nCompile a custom texture shader for rendering with …\nCompiles a shader variant.\nReturns the current enabled <code>DebugFlags</code> of the underlying …\nDraw a solid color to the current target at the specified …\nGet access to the underlying <code>EGLContext</code>.\nGet access to the underlying <code>EGLContext</code>.\nRenderElements specific to using a <code>GlesRenderer</code>\nGL color format conversion helpers\nInternal format of the renderbuffer\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a GlesTexture from a raw gl texture id.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the uniform to a static lifetime, cloning the name …\nConvert the uniform name to a static lifetime, cloning the …\nWhether the texture is upside down\nCompiles and links a shader program.\nGL location of the uniform\nChecks if the contexts of this value match the provided …\nname of the uniform\nname of the uniform\nCreates a new OpenGL ES renderer from a given <code>EGLContext</code> …\nCreate a new uniform variable value\nCreate a new uniform variable description\nOverrides the default texture shader used, if none is …\nProjection matrix for this frame\nRender a pixel shader into the current target at a given …\nRender a texture to the current target using given …\nRender part of a texture as given by src to the current …\nSets the <code>desc</code> uniform to this value.\nSize of the renderbuffer\nGet the supported <code>Capabilities</code> of the renderer\nOpenGL texture id of this texture\nConvert the uniform to a static lifetime, cloning the …\nConvert the uniform name to a static lifetime, cloning the …\nReturns the type of this uniform value\ntype of the uniform\ntype of the uniform\nvalue of the uniform\nCreates a new OpenGL ES renderer from a given <code>EGLContext</code> …\nRun custom code in the GL context owned by this renderer.\nRun custom code in the GL context owned by this renderer.\nUniform type that was declared when compiling\nUniform type that was provided during the call\nMatrices supplied as f32-arrays\nMatrices supplied as f32-arrays\nMatrices supplied as f32-arrays\nMatrices supplied as f32-arrays\nMatrices supplied as f32-arrays\nMatrices supplied as f32-arrays\nMatrices supplied as f32-arrays\nMatrices supplied as f32-arrays\nMatrices supplied as f32-arrays\nIf transpose is <code>false</code>, each matrix is assumed to be …\nIf transpose is <code>false</code>, each matrix is assumed to be …\nIf transpose is <code>false</code>, each matrix is assumed to be …\nIf transpose is <code>false</code>, each matrix is assumed to be …\nIf transpose is <code>false</code>, each matrix is assumed to be …\nIf transpose is <code>false</code>, each matrix is assumed to be …\nIf transpose is <code>false</code>, each matrix is assumed to be …\nIf transpose is <code>false</code>, each matrix is assumed to be …\nIf transpose is <code>false</code>, each matrix is assumed to be …\nRender element for drawing with a gles2 pixel shader\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>PixelShaderElement</code> from a <code>GlesPixelProgram</code>, …\nResize the canvas area\nUpdate the additional uniforms (see …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the function has been successfully loaded.\nLoad each OpenGL symbol using a custom load function. This …\nNo value.\nNo value.\nNo value.\nNo value.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns (internal_format, read_format, type)\nReturns the bits per pixel for a given read format and type\nReturns the fourcc for a given internal format\nReturns a recommended read format and type for a given …\nReturns the fourcc for a given read format and type\n<code>Frame</code> implementation of a <code>GlowRenderer</code>.\nA renderer utilizing OpenGL ES 2 and <code>glow</code> on top for …\nGet access to the underlying <code>EGLContext</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new OpenGL ES 2 + Glow renderer from a given …\nGet the supported <code>Capabilities</code> of the renderer\nCreates a new OpenGL ES 2 + Glow renderer from a given …\nRun custom code in the GL context owned by this renderer.\nRun custom code in the GL context owned by this renderer.\nBuffer allocation failed\nA device produced by a <code>GraphicsApi</code>.\nDevices this api produces\nThe device has gone missing\nErrors generated by <code>GpuManager</code> and <code>MultiRenderer</code>.\nErrors this api returns\nTracks available gpus from a given <code>GraphicsApi</code>\nA graphics api, that supports enumerating graphics devices\nFailed to import buffer using the api on any device\nThe device requested did not match the expected\n<code>Frame</code> implementation of a <code>MultiRenderer</code>.\nRenderer, that transparently copies rendering results to …\n<code>Texture</code>s produced by a <code>MultiRenderer</code>.\n<code>TextureMapping</code>s produced by <code>ExportMem</code>-implementations of …\nThe graphics api has found no node matching the drm node\nError on the rendering device\nThe graphics api errored on device enumeration\nThe <code>Renderer</code> this devices contains\nError on the target device\nThe graphics api errored on device enumeration\nReturns an allocator for buffers renderers of this device …\nCreate a <code>MultiRenderer</code> from two different <code>GraphicsApi</code>s.\nFunction for optimizing buffer imports across multiple …\nEnumerate available devices by:\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nImplementation of the multi-gpu <code>GraphicsApi</code> using user …\nUnique name for representing the api type in log messages\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMethod to force a re-enumeration, e.g. to free resources\nCreate a new <code>GpuManager</code> for a given <code>GraphicsApi</code>.\nReturns a <code>DrmNode</code> representing the graphics device\nReturns a reference to the underlying renderer\nCreate a <code>MultiRenderer</code>.\nReturns a mutable reference to the underlying renderer\nCreate a <code>MultiRenderer</code> from a single device.\nError creating a drm node\nEGL api error\nErrors raised by the <code>GbmGlesBackend</code>\nA <code>GraphicsApi</code> utilizing user-provided GBM Devices and …\n<code>ApiDevice</code> of the <code>GbmGlesBackend</code>\nOpenGL error\nAdd a new GBM device for a given node to the api\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRemove a given node from the api\nSets the default flags to use for allocating buffers via …\nInitialize a new <code>GbmGlesBackend</code> with a <code>ContextPriority</code> for …\nInitialize a new <code>GbmGlesBackend</code> with a factory for …\nThe given buffer was not accessible\nThe underlying buffer has been destroyed\nThe requested operation failed\nFailed to import the given buffer\nThe given buffer is incomplete\nMapping the buffer failed\nNo target is currently bound\nError returned during rendering using pixman\nHandle to the currently rendered frame during …\nTexture mapping of a pixman texture\nOffscreen render buffer\nA renderer utilizing pixman\nA handle to a pixman texture\nSynchronizing access to the buffer failed\nBlocking for a synchronization primitive failed\nThe requested operation is not supported\nThe given buffer has an unsupported modifier\nThe given buffer has an unsupported number of planes\nThe given buffer has an unsupported pixel format\nThe given wl buffer has an unsupported pixel format\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new pixman renderer\nActual len of the buffer\nExpected len of the buffer\nA fence that will be signaled in finite time\nWaiting for the fence was interrupted for an unknown …\nA sync point the will be signaled in finite time\nReturns a boxed object from a boxed trait object if the …\nReturns a mutable reference to the object within the trait …\nReturns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …\nReturns a reference to the object within the trait object …\nExport this fence as a native fence fd\nExport this <code>SyncPoint</code> as a native fence fd\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a reference to the underlying <code>Fence</code> if any\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the trait object wraps an object of type …\nReturns whether this fence can be exported as a native …\nReturns whether this sync point can be exported as a …\nQueries the state of the sync point\nQueries the state of the fence\nCreate an already signaled sync point\nBlocks the current thread until the fence is signaled\nBlocks the current thread until the sync point is signaled\nError accessing shm buffer\nError returned by the TestRenderer\nBlocking for a synchronization primitive failed\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA wayland buffer\nA simple wrapper for counting commits\nA tracker for holding damage\nA set of damage returned from <code>DamageBag::damage_since</code> of …\nIterator for <code>DamageSet::into_iter</code>\nA snapshot of the current state of a <code>DamageBag</code>\nWrapper for a set of opaque regions\nIterator for <code>OpaqueRegions::into_iter</code>\nSurface state for rendering related data\nType stored in WlSurface states data_map\nDefines a view into the surface\nAdd some damage to the tracker\nGet the attached buffer. Can be used to check if surface …\nReturns the scale of the current attached buffer\nReturns the logical size of the current attached buffer\nReturns the transform of the current attached buffer\nGets the current <code>CommitCounter</code> of this tracker\nGets the current <code>CommitCounter</code> of this snapshot\nGet the current commit position of this surface\nProvides raw access to the stored damage\nProvides raw access to the stored damage\nGets the raw damage of this surface\nGet the damage since the last commit\nGet the damage since the last commit\nGets the damage since the last commit\nGet the distance between two <code>CommitCounter</code>s\nDraws the render elements using a given <code>Renderer</code> and <code>Frame</code>\nThe logical destination size used for scaling\nCreate an empty damage snapshot\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCopy the damage from a slice into a new <code>DamageSet</code>.\nCopy the opaque regions from a slice into a new …\nImports buffers of a surface using a given <code>Renderer</code>\nImports buffers of a surface and its subsurfaces using a …\nIncrement the commit counter\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitialize a a new <code>DamageBag</code> with the specified limit\nThe logical offset for a sub-surface\nHandler to let smithay take over buffer management.\nGets the opaque regions of this surface\nReset the damage\nGet a snapshot of the current damage\nThe logical source used for cropping\nReturns the logical size of the surface.\nLocation of the buffer relative to the previous call of …\nGets a reference to the texture for the specified renderer\nGets the <code>SurfaceView</code> of this surface\nAccess the buffer related states associated to this surface\nThe whole session has been activated\nAllows errors to be described by an error number\nError type of the implementation\nEvents that can be generated by a session\nThe whole session has been paused\nGeneral session interface.\nReturns the error number representing this error if any\nChange the currently active virtual terminal\nClose a previously opened file descriptor\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCheck if this session is currently active\nImplementation of the <code>Session</code> trait through the libseat.\nOpens a device at the given <code>path</code> with the given flags.\nWhich seat this session is on\nErrors related to direct/tty sessions\nFailed to close device\nFailed to close device\nFailed to open device\nFailed to open session\n<code>Session</code> via the libseat\n<code>SessionNotifier</code> via the libseat\nSession is already closed,\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTries to create a new session via libseat.\nCreates a new session object belonging to this notifier.\nA new device has been detected\nA device has changed\nA device has been removed\nBackend to monitor available drm devices.\nEvents generated by the <code>UdevBackend</code>, notifying you of …\nReturns the paths of all available GPU devices\nGet a list of DRM devices currently known to the backend\nReturns the loaded driver for a device named by it’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>UdevBackend</code>\nReturns the path of the primary GPU device if any\nID of the new device\nID of the changed device\nID of the removed device\nPath of the new device\nApp info to be passed to the Vulkan implementation.\nInformation about the driver providing a <code>PhysicalDevice</code>.\nSome required extensions are not available.\nA Vulkan instance.\nAn error that may occur when creating an <code>Instance</code>.\nFailed to load the Vulkan library.\nError loading the Vulkan library\nA Vulkan physical device.\nError returned when a physical device property is not …\nThe instance was created using Vulkan 1.0.\nVulkan API error.\nReturns the version of Vulkan supported by this instance.\nReturns the version of Vulkan supported by this device.\nThe Vulkan conformance test this driver is conformant …\nReturns the device extensions supported by the physical …\nInformation about the Vulkan driver.\nReturns the enabled instance extensions.\nEnumerates over all physical devices available on the …\nReturns an iterator which contains the available instance …\nReturns the Vulkan 1.0 physical device features.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns properties for each supported DRM modifier for the …\nGet physical device format properties.\nGet physical device properties.\nReturns a reference to the underlying <code>ash::Instance</code>.\nReturns a handle to the underlying <code>vk::PhysicalDevice</code>.\nReturns <code>true</code> if this device supports the specified device …\nID which identifies the driver.\nInformation about universally unique identifiers (UUIDs) …\nInformation describing the driver.\nThe instance which provided this physical device.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the specified instance extension is …\nReturns the physical device limits.\nReturns the name of the device.\nName of the app.\nThe name of the driver.\nCreates a new <code>Instance</code>.\nReturns the major and minor numbers of the primary node …\nReturns the physical device properties.\nReturns the device’s descriptor set properties.\nReturns the major and minor numbers of the render node …\nReturns the device type.\nThe <code>Version</code> type.\nVersion of the app.\nCreates a new <code>Instance</code> with some additionally specified …\nThe version of Smithay.\nVersion 1.0 of the Vulkan API.\nVersion 1.1 of the Vulkan API.\nVersion 1.2 of the Vulkan API.\nVersion 1.3 of the Vulkan API.\nA Vulkan API version.\nReturns the argument unchanged.\nConverts a packed version into a version struct.\nCalls <code>U::from(self)</code>.\nThe major version of the Vulkan API.\nThe minor version of the Vulkan API.\nThe patch version of the Vulkan API.\nConverts a version struct into a packed version.\nThe variant of the Vulkan API.\nThe user requested to close the window.\nEGL error.\nErrors thrown by the <code>winit</code> backends\nFailed to initialize an event loop.\nThe focus state of the window changed\nAn input event occurred.\nContext creation is not supported on the current window …\nA redraw was requested\nRenderer initialization failed.\nThe window has been resized\nSurface creation error.\nFailed to initialize a window.\nSpecific events generated by Winit\nAbstracted event loop of a <code>WinitWindow</code>.\nWindow with an active EGL Context created by <code>winit</code>.\nMarker used to define the <code>InputBackend</code> types for the winit …\nWinit-Backend internal event wrapping <code>winit</code>’s types into …\nWinit-Backend internal event wrapping <code>winit</code>’s types into …\nWinit-Backend internal event wrapping <code>winit</code>’s types into …\nWinit-Backend internal event wrapping <code>winit</code>’s types into …\nWinit-Backend internal event wrapping <code>winit</code>’s types into …\nWinit-Backend internal event wrapping <code>winit</code>’s types into …\nWinit-Backend internal event wrapping <code>winit</code>’s types into …\nWinit-Backend internal event wrapping <code>winit</code>’s types into …\nVirtual input device used by the backend to associate …\nBind the underlying window to the underlying renderer.\nRetrieve the buffer age of the current backbuffer of the …\nProcesses new events of the underlying event loop and …\nRetrieve the underlying <code>EGLSurface</code> for advanced operations\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>WinitGraphicsBackend</code>, which implements the …\nCreate a new <code>WinitGraphicsBackend</code>, which implements the …\nCreate a new <code>WinitGraphicsBackend</code>, which implements the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAccess the underlying renderer\nScale factor of the underlying window.\nSubmits the back buffer to the window by swapping, …\nReference to the underlying window\nWindow size of the underlying window\nThe new scale factor\nThe new physical size (in pixels)\nAn error which may occur when allocating buffers for …\nFailed to allocate buffers needed to present to the window.\nAllocating a new buffer failed\nThe X server is not capable of direct rendering.\nThe window has received a request to be closed.\nConnecting to the X server failed.\nConnection to X server was lost.\nCreating the window failed.\nAn error which may occur when creating an X11 window.\nDuplicating the dmabuf handles failed.\nThe focus state of the window changed.\nThe format dmabuf presented does not match the format of …\nAn input event occurred.\nAn invalid window was used to create an X11 surface.\nA required X11 extension was not present or has the right …\nAn error that occurs when a required X11 extension is not …\nNo depth fulfilling the pixel format requirements was …\nNo free slots\nNo visual fulfilling the pixel format requirements was …\nAn extension was not found.\nFailed to open the DRM device to allocate buffers.\nError while presenting to a window.\nThe last buffer presented to the window has been displayed.\nAn error that may occur when presenting.\nSome protocol error occurred during setup.\nThe X server has required the compositor to redraw the …\nThe window was resized.\nAn X11 surface already exists for this window.\nThe dmabuf being presented has too many planes.\nThe device used to allocate buffers is not the correct drm …\nAn X11 window.\nBuilder used to construct a window.\nThe window has been destroyed\nAn extension was present, but the version is too low.\nRepresents an active connection to the X to manage events …\nAn error emitted by the X11 backend during setup.\nAn event emitted by the X11 backend.\nA handle to the X11 backend.\nMarker used to define the <code>InputBackend</code> types for the X11 …\nX11-Backend internal event wrapping <code>X11</code>’s types into a …\nX11-Backend internal event wrapping <code>X11</code>’s types into a …\nX11-Backend internal event wrapping <code>X11</code>’s types into a …\nX11-Backend internal event wrapping <code>X11</code>’s types into a …\nAn X11 surface which uses GBM to allocate and present …\nVirtual input device used by the backend to associate …\nReturns the next buffer that will be presented to the …\nCreates a window using the options specified in the …\nReturns the underlying connection to the X server.\nCreates a surface that allocates and presents buffers to …\nReturns the depth id of this window.\nReturns the DRM node the X server uses for direct …\nReturns the format of the buffers the surface accepts.\nReturns the format of the window.\nReturns the format expected by the window.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a handle to the X11 backend.\nReturns the XID of the window.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaps the window, making it visible.\nInitializes the X11 backend by connecting to the X server.\nReturns a new builder.\nReset the age for all internal buffers.\nResets the internal buffers.\nReturns the default screen number of the X server.\nChanges the visibility of the cursor within the confines …\nSets the title of the window.\nSets the size of the window that will be created.\nReturns the size of this window.\nConsume and submit the buffer to the window.\nSets the title of the window that will be created by the …\nUnmaps the window, making it invisible.\nReturns a temporary reference to the window belonging to …\nReturns a temporary reference to the window belonging to …\nReturns a temporary reference to the window belonging to …\nReturns a temporary reference to the window belonging to …\nReturns the window the surface presents to.\nGet a temporary reference to a window by its XID\nThe major version of the extension available on the X …\nThe minor version of the extension available on the X …\nThe minimum required major version of extension.\nThe minimum required minor version of extension.\nThe name of the required extension.\nThe name of the extension.\nThe minimum required major version of extension.\nThe minimum required minor version of extension.\nThe received event.\nThe new focus state\nThe new size of the window\nXID of the window\nThe XID of the window\nThe XID of the window.\nXID of the window\nXID of the window\nXID of the window\nQuery all surfaces\nUngrab all active popups\nThis resource has been destroyed and can no longer be used.\ninput-method <code>PopupSurface</code>\nThe client tried to grab a popup after it has been mapped\nMap of <code>LayerSurface</code>s on an <code>Output</code>\nA <code>LayerSurface</code> represents a single layer surface as given …\nThe client tried to grab a popup which is not the topmost\nInclude all popup surfaces\nThe client tried to grab a popup after it’s parent has …\nRepresents the explicit grab a client requested for a popup\nDefines the possible errors that can be returned from …\nDefault implementation of a <code>KeyboardGrab</code> for <code>PopupGrab</code>\nRepresents a popup surface\nHelper to track popups.\nDefault implementation of a <code>PointerGrab</code> for <code>PopupGrab</code>\nDefines the possibly strategies for the <code>PopupGrab::ungrab</code> …\nInclude all subsurfaces\nInclude the toplevel surface\nOnly ungrab the topmost popup\nAn xdg toplevel surface\nRepresents a single application window\nRepresents the surface of a <code>Window</code>\nDefines the surface types that can be queried with …\nAn X11 surface\nxdg-shell <code>PopupSurface</code>\nGet a flags value with all known bits set.\nForce re-arranging the layer surfaces, e.g. when the …\nReturns the bounding box over this layer surface and its …\nReturns a bounding box over this window and its children.\nReturns the bounding box over this layer surface, it …\nReturns a bounding box over this window and children …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns the cached protocol state\nReturns true, if the surface has indicated, that it is …\nCleanup some internally used resources.\nNeeds to be called periodically (but not necessarily …\nNeeds to be called for <code>PopupManager</code> to correctly update …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nReturns the current grabbed <code>WlSurface</code>.\nThe intersection of a source flags value with the …\nDismiss the <code>popup</code> associated with the `surface.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nFinds the popup belonging to a given <code>WlSurface</code>, if any.\nFinds the toplevel wl_surface this popup belongs to.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nReturns the surface geometry as set by the client using …\nReturns the geometry of this window.\nComputes this popup’s location relative to its toplevel …\nTake an explicit grab for the provided <code>PopupKind</code>\nCheck if this grab has ended\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nChecks if the window is a wayland one.\nChecks if the window is an X11 one.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nConvenience method for getting a <code>KeyboardGrabStartData</code> for …\nReturns the layer this surface resides on, if any yet.\nReturns the <code>LayerSurface</code> matching a given <code>WlSurface</code>, if …\nReturns the geometry of a given mapped <code>LayerSurface</code>.\nRetrieve a <code>LayerMap</code> for a given <code>Output</code>.\nReturns the underlying <code>WlrLayerSurface</code>\nReturns a <code>LayerSurface</code> under a given point and on a given …\nIterator over all <code>LayerSurface</code>s currently mapped.\nIterator over all <code>LayerSurface</code>s currently mapped on a …\nReturns layers count\nMap a <code>LayerSurface</code> to this <code>LayerMap</code>.\nReturns the namespace of this surface\nCreate a <code>PopupKeyboardGrab</code> for the provided <code>PopupGrab</code>\nCreate a <code>PopupPointerGrab</code> for the provided <code>PopupGrab</code>\nCreate a new <code>LayerSurface</code> from a given <code>WlrLayerSurface</code> and …\nConstruct a new <code>Window</code> from a xdg toplevel surface\nConstruct a new <code>Window</code> from a xdg toplevel surface\nConstruct a new <code>Window</code> from an X11 surface\nReturn the area of this output, that is not exclusive to …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nUpdates internal values\nOverride the z_index of this Window\nConvenience method for getting a <code>PointerGrabStartData</code> for …\nReturns the popups and their relative positions for a …\nReturns the previous serial that was used to grab the …\nThe intersection of a source flags value with the …\nSends the dmabuf feedback to all the subsurfaces in this …\nSends the dmabuf feedback to all the subsurfaces in this …\nSends the frame callback to all the subsurfaces in this …\nSends the frame callback to all the subsurfaces in this …\nReturns the serial that was used to grab the popup\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nActivate/Deactivate this window\nThis module contains the <code>Space</code> helper class as well has …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nFinds the topmost surface under this point if any and …\nFinds the topmost surface under this point matching the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTakes the <code>PresentationFeedbackCallback</code>s from all …\nTakes the <code>PresentationFeedbackCallback</code>s from all …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns the underlying xdg toplevel surface\nStart tracking a new popup.\nReturns the underlying surface\nUngrab and dismiss a popup\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nRemove a <code>LayerSurface</code> from this <code>LayerMap</code>.\nReturns a <code>UserDataMap</code> to allow associating arbitrary data …\nReturns a <code>UserDataMap</code> to allow associating arbitrary data …\nHelper functions to ease dealing with surface trees\nRun a closure on all surfaces in this layer (including it…\nRun a closure on all surfaces in this window (including it…\nReturns the underlying <code>WlSurface</code>\nRetrieves the underlying <code>WlSurface</code>\nReturns the underlying X11 surface\nWlrLayer::Background default zindex\nWlrLayer::Bottom default zindex\nUse the bounding box as the reference\nDefines the behavior for <code>constrain_space_element</code>\nDefines the reference size for the constrain behavior.\nA single texture\nUse the geometry as the reference\nThe given <code>Output</code> has no set mode\nErrors thrown by <code>Space::elements_for_output</code>\nDefault Layer for RenderElements\nIndicates default values for some zindexs inside smithay\nDefault zindex for Windows\nRepresents two dimensional plane to map windows and …\nElement mappable onto a <code>Space</code>\nDefines the render elements used internally by a <code>Space</code>\nA single wayland surface\nA custom surface tree\nWlrLayer::Top default zindex\nThe given <code>Output</code> is not mapped to this <code>Space</code>.\nDefines the alignment of the element inside of the …\nReturns the bounding box of this element\nDefines how the element should be scaled\nConstrain the render elements of a <code>SpaceElement</code>\nReturns the bounding box of a <code>SpaceElement</code> including its …\nReturns the geometry of a <code>SpaceElement</code> including its …\nReturns the location of a <code>SpaceElement</code> inside the Space.\nFinds the topmost element under this point if any and …\nIterate elements in z-order back to front\nIterate elements on a specific output in z-order back to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a surface tree from a surface\nReturns the geometry of this element.\nReturns the geometry of this element.\nGets the id of this space\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whenever a given point inside this element will be …\nReturns the layer surface matching a given surface, if any\nMap a <code>SpaceElement</code> and move it to top of the stack\nMaps an <code>Output</code> inside the space.\nThe element is displayed on a given output.\nReturns the geometry of the output including it’s …\nThe element left a given output\nGet a reference to the outputs under a given point\nIterate over all mapped <code>Output</code>s of this space.\nReturns all <code>Output</code>s a <code>SpaceElement</code> overlaps with.\nMoves an already mapped <code>SpaceElement</code> to top of the stack\nDefines what should be used as the reference for …\nPeriodically called to update internal state, if necessary\nPeriodically called to update internal state, if necessary\nRefresh some internal values and update client state, …\nRetrieve the render elements for an output\nRetrieve the render elements for a given region of the …\nRender a output\nSet the rendered state to activated, if applicable to this …\nAggregate multiple types implementing <code>SpaceElement</code> into a …\nAggregate multiple types implementing <code>SpaceElement</code> into a …\nGet the render elements for a specific output\nUnmap a <code>SpaceElement</code> from this space.\nUnmap an <code>Output</code> from this space.\nGets the z-index of this element\nGets the z-index of this element\nStores the <code>SurfacePresentationFeedback</code> for a specific …\nHolds the presentation feedback for a surface\nReturns the bounding box of a given surface and all its …\nMark the presentation feedbacks for this surface as …\nMark all stored <code>SurfacePresentationFeedback</code>s as discarded\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>SurfacePresentationFeedback</code> from the surface …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>OutputPresentationFeedback</code> for a specific …\nReturns the associated output\nUpdates the output overlap for a surface tree.\nMark the presentation feedbacks for this surface as …\nMark all stored <code>SurfacePresentationFeedback</code>s as presented\nSends dmabuf feedback for a surface and its subsurfaces …\nSends frame callbacks for a surface and its subsurfaces …\nRetrieves the per surface <code>wp_presentation_feedback::Kind</code> …\nRetrieve a previously stored primary scan-out output from …\nTakes the <code>PresentationFeedbackCallback</code>s from the surface …\nReturns the topmost (sub-)surface under a given position …\nUpdate the surface primary scan-out output from a output …\nRun a closure on all surfaces of a surface tree\nType used to represent the target currently holding the …\nType used to represent the target currently holding the …\nA Seat handle\nHandler trait for Seats\nDelegate type for all Seat globals.\nType used to represent the target currently holding the …\nAdds the keyboard capability to this seat\nAdds the pointer capability to this seat\nAdds the touch capability to this seat\nAdds the touch capability to this seat and allows the use …\nRetrieves <code>WlSeat</code> resources for a given client\nCallback that will be notified whenever a client requests …\nCallback that will be notified whenever the focus of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempt to retrieve a <code>Seat</code> from an existing resource\nAccess the keyboard of this seat if any\nAccess the pointer of this seat if any\nAccess the touch device of this seat, if any.\nGet the id of WlSeat global\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKeyboard-related types for smithay’s input abstraction\nCallback that will be notified whenever the keyboard led …\nGets this seat’s name\nCreate new delegate SeatState\nCreate a new seat\nCreate a new seat global\nChecks whether a given <code>WlSeat</code> is associated with this <code>Seat</code>\nPointer-related types for smithay’s input abstraction\nRemove the keyboard capability from this seat\nRemove the pointer capability from this seat\nRemove the touch capability from this seat\nSeatState getter\nTouch-related types for smithay’s input abstraction\nAccess the <code>UserDataMap</code> associated with this <code>Seat</code>\nlibxkbcommon could not load the specified keymap\nErrors that can be encountered when creating a keyboard …\nResult for key input filtering (see <code>KeyboardHandle::input</code>)\nForward the given keycode to the client\nData about the event that started the grab.\nDo not forward and return value\nSmithay could not create a tempfile to share the keymap …\nA trait to implement a keyboard grab\nAn handle to a keyboard handler\nThis inner handle is accessed from inside a keyboard grab …\nTrait representing object that can receive keyboard …\nThe keyboard code, often corresponding to a physical key.\nWraps an XKB keymap into a sealed file or stores as just a …\nThe keyboard symbol, often corresponding to a character.\nHandle to the underlying keycode to allow for different …\nReference to the XkbLayout in the active keymap.\nMapping of the led of a keymap\nCurrent state of the led when available\nRepresents the current state of the keyboard modifiers\nConfiguration for xkbcommon.\nThe currently active state of the Xkb.\nQuery and manipulate Xkb layouts.\nGet the active layout of the keyboard.\nThe “alt” key\nIndex of the CAPSLOCK led\nState of CAPSLOCK led\nThe “Caps lock” key\nChange the repeat info configured for this keyboard\nCheck if client of given resource currently has keyboard …\nThe “control” key\nRetrieve the current keyboard focus\nAccess the current focus of this keyboard\nSwitches layout forward cycling when it reaches the end.\nSwitches layout backward cycling when it reaches the start.\nKeyboard focus of a given seat was assigned to this handler\nThe focused surface, if any, at the start of the grab.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>Keysym</code> from the given <code>char</code>.\nGet the mapping from a keymap\nInitialize the led state from an xkb state and mapping\nReturns the start data for the grab, if any.\nCheck if this keyboard is currently grabbed with this …\nAn input was reported.\nHandle a keystroke\nSend the input to the focused keyboards\nForward a key event to the focused client\nUpdate the state of the keyboard without forwarding the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTell whether a keysym is a cursor key.\nCheck if keyboard has focus\nTell whether a keysym is a function key.\nCheck if this keyboard is currently being grabbed\nTell whether a keysym is a keypad key.\nTell whether a key is a miscellaneous function key.\nTell whether a key is a modifier key.\nTell whether a keysym is a PF key.\nTell whether a keysym is a private keypad key.\nThe “ISO level 3 shift” key\nA key was pressed on a keyboard from a given seat\nTranslate a keyboard symbol to its approximate character.\nGet the reference to the xkb keymap.\nConvert a given keycode as a <code>KeysymHandle</code> modified by this …\nAccess the <code>Serial</code> of the last <code>keyboard_enter</code> event, if …\nA comma separated list of layouts (languages) to include …\nGet the human readable name for the layout.\nIterate over layouts present in the keymap.\nThe keyboard focus of a given seat left this handler\nGet the current led state\nThe “logo” key\nThe keyboard model by which to interpret keycodes and LEDs.\nReturns the sym for the underlying keycode with all …\nReturns the syms for the underlying keycode with all …\nGet the current modifiers state\nGet the current modifiers state\nHold modifiers were changed on a keyboard from a given seat\nGet a string corresponding to the name of this keyboard …\nCreate a new <code>KeyCode</code> from a raw keyboard code.\nCreate a new <code>Keysym</code> from a raw keyboard symbol.\nTurn the keymap into a string using KEYMAP_FORMAT_TEXT_V1, …\nIndex of the NUMLOCK led\nState of NUMLOCK led\nThe “Num lock” key\nA comma separated list of options, through which the user …\nReturn the key codes of the currently pressed keys.\nGet the raw keyboard code.\nGet the raw keyboard symbol.\nReturns the raw code in X keycode system (shifted by 8)\nGet the raw latin keysym or fallback to current raw keysym.\nReturns the syms for the underlying keycode without any …\nReturns the syms for the underlying keycode without any …\nThe rules file to use.\nIndex of the SCROLLLOCK led\nState of SCROLLLOCK led\nSend the keymap contained within to a WlKeyboard\nSerialized modifier state, as send e.g. by the wl_keyboard …\nA focus change was requested.\nSet the current focus of this keyboard\nSet the current focus of this keyboard\nChange the current grab on this keyboard to the provided …\nChange the current grab on this keyboard to the provided …\nChange the <code>Keymap</code> used by the keyboard.\nSet layout of the keyboard to the given index.\nChange the <code>XkbConfig</code> used by the keyboard.\nThe “shift” key\nThe data about the event that started the grab.\nGet the reference to the xkb state.\nThe grab has been unset or replaced with another grab.\nRemove any current grab on this keyboard, resetting it to …\nRemove any current grab on this keyboard, resetting it to …\nUpdate the modifiers state from an xkb state\nUpdate the led state from an xkb state and mapping\nA comma separated list of variants, one per layout, which …\nRun a closure with the file descriptor to ensure safety\nIterate over the keysyms of the currently pressed keys.\nIterate over the currently pressed keys.\nAccess the underlying Xkb state and perform mutable …\nU+0030 DIGIT ZERO\nU+0031 DIGIT ONE\nU+0032 DIGIT TWO\nU+0033 DIGIT THREE\nU+0034 DIGIT FOUR\nU+0035 DIGIT FIVE\nU+0036 DIGIT SIX\nU+0037 DIGIT SEVEN\nU+0038 DIGIT EIGHT\nU+0039 DIGIT NINE\nU+0041 LATIN CAPITAL LETTER A\nU+00C6 LATIN CAPITAL LETTER AE\nU+00C1 LATIN CAPITAL LETTER A WITH ACUTE\nU+1EA0 LATIN CAPITAL LETTER A WITH DOT BELOW\nU+0102 LATIN CAPITAL LETTER A WITH BREVE\nU+1EAE LATIN CAPITAL LETTER A WITH BREVE AND ACUTE\nU+1EB6 LATIN CAPITAL LETTER A WITH BREVE AND DOT BELOW\nU+1EB0 LATIN CAPITAL LETTER A WITH BREVE AND GRAVE\nU+1EB2 LATIN CAPITAL LETTER A WITH BREVE AND HOOK ABOVE\nU+1EB4 LATIN CAPITAL LETTER A WITH BREVE AND TILDE\nU+00C2 LATIN CAPITAL LETTER A WITH CIRCUMFLEX\nU+1EA4 LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND ACUTE\nU+1EAC LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND DOT BELOW\nU+1EA6 LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND GRAVE\nU+1EA8 LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND HOOK …\nU+1EAA LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND TILDE\nU+00C4 LATIN CAPITAL LETTER A WITH DIAERESIS\nU+00C0 LATIN CAPITAL LETTER A WITH GRAVE\nU+1EA2 LATIN CAPITAL LETTER A WITH HOOK ABOVE\nLeft alt\nRight alt\nU+0100 LATIN CAPITAL LETTER A WITH MACRON\nU+0104 LATIN CAPITAL LETTER A WITH OGONEK\nU+0660 ARABIC-INDIC DIGIT ZERO\nU+0661 ARABIC-INDIC DIGIT ONE\nU+0662 ARABIC-INDIC DIGIT TWO\nU+0663 ARABIC-INDIC DIGIT THREE\nU+0664 ARABIC-INDIC DIGIT FOUR\nU+0665 ARABIC-INDIC DIGIT FIVE\nU+0666 ARABIC-INDIC DIGIT SIX\nU+0667 ARABIC-INDIC DIGIT SEVEN\nU+0668 ARABIC-INDIC DIGIT EIGHT\nU+0669 ARABIC-INDIC DIGIT NINE\nU+0639 ARABIC LETTER AIN\nU+0627 ARABIC LETTER ALEF\nU+0649 ARABIC LETTER ALEF MAKSURA\nU+0628 ARABIC LETTER BEH\nU+060C ARABIC COMMA\nU+0636 ARABIC LETTER DAD\nU+062F ARABIC LETTER DAL\nU+064F ARABIC DAMMA\nU+064C ARABIC DAMMATAN\nU+0688 ARABIC LETTER DDAL\nU+06CC ARABIC LETTER FARSI YEH\nU+064E ARABIC FATHA\nU+064B ARABIC FATHATAN\nU+0641 ARABIC LETTER FEH\nU+06D4 ARABIC FULL STOP\nU+06AF ARABIC LETTER GAF\nU+063A ARABIC LETTER GHAIN\nU+0647 ARABIC LETTER HEH\nU+062D ARABIC LETTER HAH\nU+0621 ARABIC LETTER HAMZA\nU+0654 ARABIC HAMZA ABOVE\nU+0655 ARABIC HAMZA BELOW\nU+0623 ARABIC LETTER ALEF WITH HAMZA ABOVE\nU+0624 ARABIC LETTER WAW WITH HAMZA ABOVE\nU+0626 ARABIC LETTER YEH WITH HAMZA ABOVE\nU+0625 ARABIC LETTER ALEF WITH HAMZA BELOW\ndeprecated\nU+06BE ARABIC LETTER HEH DOACHASHMEE\nU+06C1 ARABIC LETTER HEH GOAL\nU+062C ARABIC LETTER JEEM\nU+0698 ARABIC LETTER JEH\nU+0643 ARABIC LETTER KAF\nU+0650 ARABIC KASRA\nU+064D ARABIC KASRATAN\nU+06A9 ARABIC LETTER KEHEH\nU+062E ARABIC LETTER KHAH\nU+0644 ARABIC LETTER LAM\nU+0653 ARABIC MADDAH ABOVE\nU+0622 ARABIC LETTER ALEF WITH MADDA ABOVE\nU+0645 ARABIC LETTER MEEM\nU+0646 ARABIC LETTER NOON\nU+06BA ARABIC LETTER NOON GHUNNA\nU+067E ARABIC LETTER PEH\nU+066A ARABIC PERCENT SIGN\nU+0642 ARABIC LETTER QAF\nU+061F ARABIC QUESTION MARK\nU+0631 ARABIC LETTER REH\nU+0691 ARABIC LETTER RREH\nU+0635 ARABIC LETTER SAD\nU+0633 ARABIC LETTER SEEN\nU+061B ARABIC SEMICOLON\nU+0651 ARABIC SHADDA\nU+0634 ARABIC LETTER SHEEN\nU+0652 ARABIC SUKUN\nU+0670 ARABIC LETTER SUPERSCRIPT ALEF\nAlias for <code>mode_switch</code>")