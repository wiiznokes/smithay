searchState.loadedDescShard("smithay", 2, "The touch point has disappeared.\nNotify that a touch point disappeared\nNotify that a touch point disappeared\nAutomatic mode based on an <code>Output</code>.\nSplit scale values advertised to clients\nFractional scaling\nSubpixels are arranged horizontally starting with blue, …\nSubpixels are arranged horizontally starting with red, …\nInteger based scaling\nAn output mode\nNo subpixel geometry\nAn abstract output.\nSource for determining output mode information.\nOutput has no active mode\nThe physical properties of an output\nDescribes the scale advertised to clients.\nStatic output mode.\nSubpixel geometry information\nUnknown subpixel geometry\nSubpixels are arranged vertically starting with blue, then …\nSubpixels are arranged vertically starting with red, then …\nWeak variant of an <code>Output</code>\nAdds a mode to the list of known modes to this output\nChange the current state of this output\nCleanup some internal resource.\nThis function returns all managed WlOutput matching the …\nCreate a new output global.\nReturns the currenly advertised location of the output\nReturns the currently advertised mode of the output\nReturns the currenly set scale of the output\nReturns the currently advertised transformation of the …\nRemoves a mode from the list of known modes\nReturns the description of the output, if xdg-output is …\nCreate a weak reference to this output\nSends <code>wl_surface.enter</code> for the provided surface with the …\nReturns the fractional scale (calculated if necessary)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempt to retrieve a <code>Output</code> from an existing resource\nReturns the integer scale as advertised for this <code>Scale</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the output is still alive\nSends <code>wl_surface.leave</code> for the provided surface with the …\nTextual representation of the make\nTextual representation of the model\nReturns the currently advertised modes of the output\nReturns the name of the output\nCreate a new output with given name and physical …\nCheck is given <code>wl_output</code> instance is managed by this <code>Output</code>…\nReturns the physical properties of the output\nReturns the preferred mode of the output\nThe refresh rate in millihertz\nSets the preferred mode of this output\nThe size of the mode, in pixels\nThe size of the monitor, in millimeters\nThe subpixel geometry\nTry to retrieve the original <code>Output</code>, if it still exists\nReturns the user data of this output\nScale of the static output\nSize of the static output\nTransform of the static output\nInteger value for protocols not supporting fractional …\nFractional scaling value used elsewhere\nType-level marker for the buffer coordinate space\nDefines a clock with a specific kind\nId for a clock according to unix clockid_t\nTrait for types serving as a coordinate for other geometry …\nThis resource has been destroyed and can no longer be used.\nTrait representing open devices that <em>may</em> return a <code>Path</code>\nRef-counted file descriptor of an open device node\nPlane is flipped vertically\nPlane is flipped vertically and rotated by 180 degrees\nPlane is flipped vertically and rotated by 270 degrees\nPlane is flipped vertically and rotated by 90 degrees\nGets the id of the clock source\nTrait that is implemented on wayland objects tracked by …\nType-level marker for the logical coordinate space\nMonotonic clock\nMarker for clock source that never returns a negative <code>Time</code>\nIdentity transformation (plane is unaltered when applied)\nType-level marker for the physical coordinate space\nA point as defined by its x and y coordinates\nType-level marker for raw coordinate space, provided by …\nRealtime clock\nA rectangle defined by its top-left corner and dimensions\nA global <code>SerialCounter</code> for use in your compositor.\nA two-dimensional scale that can be used to scale <code>Point</code>s, …\nA serial type, whose comparison takes into account the …\nA counter for generating serials, for use in the client …\nA size as defined by its width and height\nA point in time for a clock with a specific kind\nPossible transformations to two-dimensional planes\nThis resource is not managed by Smithay\nPlane is rotated by 180 degrees\nPlane is rotated by 270 degrees\nPlane is rotated by 90 degrees\nReturns the absolute value of this coordinate\nCheck if object is alive\nCompute the bounding box of a given set of points\nRestrict this <code>Size</code> to min and max <code>Size</code> with the same …\nConstrain this <code>Point</code> within a <code>Rectangle</code> with the same …\nChecks whether given <code>Point</code> is inside the rectangle\nChecks whether given <code>Rectangle</code> is inside the rectangle\nReturns the angle (in degrees) of the transformation\nReturns the path of the open device if possible\nDownscale the coordinate\nDownscale this <code>Point</code> by a specified <code>Scale</code>\nDownscale this <code>Size</code> by a specified <code>Scale</code>\nDownscale this <code>Rectangle</code> by the supplied <code>Scale</code>\nGets the duration from self until a later time\nReturns true if the transformation would flip contents\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>Rectangle</code> from the coordinates of its …\nConvert to this coordinate from a f64\nCreate a new <code>Rectangle</code> from the coordinates of its …\nSAFETY: Make sure that <code>fd</code> is a valid value!\nvertical coordinate\nGets the id of the clock\nClamp rectangle to min and max corners resulting in the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInverts any 90-degree transformation into 270-degree …\nCheck if this <code>Size</code> is empty\nCheck if this <code>Rectangle</code> is empty\nChecks if a serial was generated after or is equal to …\nLocation of the top-left corner of the rectangle\nA projection matrix to apply this transformation\nCompare and return the larger one\nCompare and return the larger one\nMerge two <code>Rectangle</code> by producing the smallest rectangle …\nCompare and return the smaller one\nCompare and return the smaller one\nCreate a new counter starting at <code>1</code>\nInitialize a new clock\nRetrieve the next serial from the counter\nTest if the coordinate is not negative\nReturns the current time\nChecks whether a given <code>Rectangle</code> overlaps with this one\nChecks whether a given <code>Rectangle</code> overlaps with this one or …\nSaturating integer addition. Computes self + other, …\nSaturating integer multiplication. Computes self * other, …\nSaturating integer subtraction. Computes self - other, …\nA general purpose signaling mechanism\nSize of the rectangle, as (width, height)\nSubtract another <code>Rectangle</code> from this <code>Rectangle</code>\nSubtract a set of <code>Rectangle</code>s from this <code>Rectangle</code>\nSubtract a set of <code>Rectangle</code>s from a set <code>Rectangle</code>s\nSubtract a set of <code>Rectangle</code>s from a set <code>Rectangle</code>s in-place\nConvert this logical point to buffer coordinate space …\nConvert this logical size to buffer coordinate space …\nConvert this logical rectangle to buffer coordinate space …\nConvert the coordinate to a f64\nConvert the underlying numerical type to f64 for floating …\nConvert the underlying numerical type to f64 for floating …\nConvert the underlying numerical type to another\nConvert the underlying numerical type to f64 for floating …\nConvert to i32 for integer-space manipulations by ceiling …\nConvert to i32 for integer-space manipulations by ceiling …\nConvert to i32 by returning the largest integer-space …\nConvert to i32 for integer-space manipulations by flooring …\nConvert to i32 for integer-space manipulations by flooring …\nConvert to i32 for integer-space manipulations by rounding …\nConvert to i32 for integer-space manipulations by rounding …\nConvert to i32 for integer-space manipulations by rounding …\nConvert to i32 by returning the smallest integet-space …\nConvert this physical point to logical coordinate space …\nConvert this physical point to logical coordinate space …\nConvert this physical point to logical coordinate space …\nConvert this physical point to logical coordinate space …\nConvert this physical rectangle to logical coordinate …\nConvert this physical rectangle to logical coordinate …\nConvert this logical point to physical coordinate space …\nConvert this logical size to physical coordinate space …\nConvert this logical rectangle to physical coordinate …\nConvert this logical point to physical coordinate space …\nConvert this logical size to physical coordinate space …\nConvert this logical rectangle to physical coordinate …\nConvert this logical point to physical coordinate space …\nConvert this logical size to physical coordinate space …\nConvert this logical point to physical coordinate space …\nConvert this logical size to physical coordinate space …\nConvert this logical rectangle to physical coordinate …\nConvert this logical rectangle to physical coordinate …\nConvert this <code>Size</code> to a <code>Point</code> with the same coordinates\nConvert this <code>Point</code> to a <code>Size</code> with the same coordinates\nConvert this <code>Point</code> to a <code>Size</code> with the same coordinates\nTransforms a point inside an area of a given size by …\nTransforms a rectangle inside an area of a given size by …\nTransformed size after applying this transformation.\nUpscale the coordinate\nUpscale this <code>Point</code> by a specified <code>Scale</code>\nUpscale this <code>Size</code> by a specified <code>Scale</code>\nUpscale this <code>Rectangle</code> by the supplied <code>Scale</code>\nVarious utilities used for user data implementations\nhorizontal coordinate\nhorizontal coordinate\nThe scale on the x axis\nHelper utilities for using x11rb as an event source in …\nvertical coordinate\nThe scale on the y axis\nTrait representing the capability of an object to listen …\nA token associated with a callback registered to a Signaler\nA signaler, main type for signaling\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDestroy the token without disabling the associated callback\nMake this object listen for signals from given signaler\nCreate a new signaler for given signal type\nRegister a new callback to this signaler\nSignal the callbacks\nA wrapper for user data, able to store any type, and …\nA storage able to store several values of <code>UserData</code> of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempt to access the wrapped user data\nAttempt to access the wrapped user data of a given type\nAccess the user data of a given type, initializing it if …\nAccess the user data of a given type, initializing it if …\nInsert a value in the map if it is not already there\nInsert a value in the map if it is not already there\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new UserData instance\nCreate a new map\nSets the UserData to a given value\nSets the UserData to a given threadsafe value\nIntegration of an x11rb X11 connection with calloop.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new X11 source.\nImplementation of <code>wp_alpha_modifier</code> protocol\nBuffer management traits.\nUtilities for handling surfaces, subsurfaces and regions\nImplementation of wp_content_type protocol\nUtilities for compositor side cursor theming support\nLinux DMABUF protocol\nDRM Lease protocol\nUtilities for handling the <code>wp_fractional_scale</code> protocol\nUtilities for handling the <code>zwp_idle_inhibit</code> protocol\nThis interface allows clients to monitor user idle status.\nUtilities for input method support\nProtocol for inhibiting the compositor keyboard shortcuts\nWlOutput advertising capabilities\nProtocol for confining the pointer.\nUtilities for pointer gestures support\nUtilities for handling the <code>wp_presentation</code> protocol\nUtilities for relative pointer support\nSeat global utilities\nUtilities for handling the security context protocol\nHandler utilities for the various selection protocols.\nUtilities for handling the <code>ext-session-lock</code> protocol\nHandler utilities for the various shell protocols\nSHM handling helpers\nWayland listening socket.\nUtilities for graphics tablet support\nUtilities for text input support\nUtilities for handling the <code>wp_viewporter</code> protocol\nUtilities for virtual keyboard support\nUtilities for handling activation requests with the …\nImplementation <code>xdg_foreign</code> protocol\nUtilities for handling the xwayland keyboard grab protocol\nHelpers for handling the xwayland shell protocol\nDelegate type for WpAlphaModifierV1 global.\nData associated with WlSurface Represents the client …\nUser data of WpAlphaModifierSurfaceV1 object\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the WpAlphaModifierV1 global id\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAlpha multiplier for the surface\nRegiseter new WpAlphaModifierV1 global\nHandler trait for associating data with a <code>WlBuffer</code>.\nCalled when the client has destroyed the buffer.\nThis rectangle should be added to the region\nAn error type signifying that the surface already has a …\nTypes potentially blocking state changes\nStates of a <code>Blocker</code>\nStop traversal completely\nA rectangle containing the damaged zone, in buffer …\nNew buffer assignation for a surface\nTrait representing a value that can be used in …\nThe block got cancelled and changes should be discarded\nPer-client state of a compositor\nHandler trait for compositor\nState of a compositor\nDescription of a part of a surface that should be …\nTraverse its children as well, providing them the data T\nUnique hook identifier used to unregister …\nA typemap-like container for double-buffered values\nA new buffer has been attached\nThe block is pending and not resolved yet\nKind of a rectangle part of a region\nDescription of the contents of a region\nUser data of WlRegion\nThe block got released and changes can be applied\nThe surface no longer has a buffer attached to it\nThe role of a subsurface surface.\nSkip its children\nThe cached state associated with a subsurface\nUser data of WlSubsurface\nThe intersection of this rectangle with the region should …\nA rectangle containing the damaged zone, in surface …\nGeneral state associated with a surface\nThe state container associated with a surface\nUser data for WlSurface\nPossible actions to do after handling a node during tree …\nAdds a blocker for the currently queued up state changes …\nRegister a destruction hook to be invoked on surface …\nRegister a post-commit hook to be invoked on surface commit\nRegister a pre-commit hook to be invoked on surface commit\nTo be called, when a previously added blocker (via …\nBuffer defining the contents of the surface\nLocation of the new buffer relative to the previous one\nScale of the contents of the buffer, for higher-resolution …\nTransform under which interpret the contents of the buffer\nThe double-buffered typemap storage of this surface\nCompositorClientState getter\nProduce a new state to be cached from the pending state\nSurface commit handler\nGet id of compositor global\nCompositorState getter\nChecks whether given point is inside the region.\nAccess the current state associated with type <code>T</code>\nDamage rectangle\nThe non-buffered typemap storage of this surface\nThe surface was destroyed.\nThe frame callbacks associated with this surface for the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieve the children of this surface\nRetrieve the parent of this surface\nRetrieve the metadata associated with a <code>wl_region</code>\nGet the current role of this surface\nRegister that this surface has given role\nCheck if the container currently contains values for type <code>T</code>\nRegion of the surface that is sensitive to user input\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this subsurface is a synchronized subsurface\nLocation of the top-left corner of this subsurface …\nMerge a state update into the current state\nCreate new <code>wl_compositor</code> version 5 and <code>wl_subcompositor</code> …\nNew subsurface handler.\nNew surface handler.\nThe same as <code>new</code>, but binds at least version 6 of …\nRegion of the surface that is guaranteed to be opaque\nAccess the pending state associated with type <code>T</code>\nList of rectangle part of this region\nUnregister a destruction hook\nUnregister a post-commit hook\nUnregister a pre-commit hook\nThe current role of the surface.\nSend the <code>scale</code> and <code>transform</code> preferences for the given …\nRetrieve the current state of the blocker\nGet id of subcompositor global\nReturns the surface for this subsurface (not to be …\nAccess the states associated to this surface\nAccess the data of a surface tree from top to bottom\nAccess the data of a surface tree from bottom to top\nDelegate type for WpContentTypeManagerV1 global.\nData associated with WlSurface Represents the client …\nUser data of <code>WpContentTypeV1</code> object\nThis informs the compositor that the client believes it is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the WpContentTypeManagerV1 global id\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRegiseter new WpContentTypeManagerV1 global\nState of the cursor shape manager.\nReturns the argument unchanged.\nCursorShapeManager GlobalId getter.\nCalls <code>U::from(self)</code>.\nRegister new CursorShapeManager global.\nData associated with a dmabuf global protocol object.\nFeedback for dmabuf allocation\nBuilder for <code>DmabufFeedback</code>\nData associated with a dmabuf global protocol object.\nA handle to a registered dmabuf global.\nData associated with a dmabuf global.\nHandler trait for <code>Dmabuf</code> import from the compositor.\nData associated with a pending <code>Dmabuf</code> import.\nDelegate type for all dmabuf globals.\nAn object to allow asynchronous creation of a <code>Dmabuf</code> …\nFeedback state for a surface\nAdds a preference tranche to the builder\nBuild the <code>DmabufFeedback</code>\nReturns the client trying to import this dmabuf, if not …\nCreates a dmabuf global with the specified supported …\nCreates a dmabuf global with the specified default …\nCreates a dmabuf global with the specified supported …\nCreates a dmabuf global with the specified supported …\nDestroys a dmabuf global.\nDisables a dmabuf global.\nThis function is called when a client has imported a <code>Dmabuf</code>…\nReturns a mutable reference to the <code>DmabufState</code> delegate …\nImport failed for an implementation dependent reason.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the surface dmabuf feedback stored in the surface …\nGets the contents of a <code>Dmabuf</code> backed <code>WlBuffer</code>.\nThe buffer being imported is incomplete.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe buffer being imported has an invalid width or height.\nImport failed due to an invalid format and plane …\nCreate a new feedback builder with the specified device …\nCreates a new <code>DmabufState</code> delegate type.\nThis function allows to override the default <code>DmabufFeedback</code>…\nSend this feedback to the provided <code>ZwpLinuxDmabufFeedbackV1</code>\nSet the default <code>DmabufFeedback</code> for the specified global …\nSet the feedback for this surface\nDmabuf import was successful.\nActive DRM Lease\nBuilder struct to collect DRM resources to be leased\nData attached to wp_drm_lease_v1 objects\nData attached to a wp_drm_lease_device_v1 global\nHandler trait for drm leasing from the compositor.\nDRM lease request containing a set of requested connectors\nData attached to wp_drm_lease_request_v1 objects\nDelegate type for a drm_lease global\nErrors thrown by the DRM lease global\nDRM lease was rejected by the compositor.\nUnable to drop DRM Master on a new file descriptor\nUnable to get a new file descriptor for the drm device used\nUnable to figure out the path of the drm device used\nUnable to open a new file descriptor for the drm device …\nAdd a connector, that is free to be leased to clients.\nAdd a connector to the to be leased resources\nAdd a CRTC to the to be leased resources\nAdd a plane to the to be leased resources\nConnectors being leased\nrequested connectors\nCRTCs being leased\nDisable the global, it will no longer be advertised to new …\nReturns a mutable reference to the <code>DrmLeaseState</code> delegate …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLease Id\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA DRM lease was destroyed, the previously given <code>DrmLease</code> …\nA client has issued a new request.\nCreate a new DRM lease global for a given <code>DrmNode</code>.\nCreate a new builder from a DRM Device\nA new DRM lease is active. Dropping the provided <code>DrmLease</code> …\nCreate a new DRM lease global for a given <code>DrmNode</code> and a …\n<code>DrmNode</code> belonging to this DRM lease global\nPlanes being leased\nResume all connectors temporarily (e.g. upon gaining DRM …\nSuspend all connectors temporarily (e.g. upon loosing DRM …\nWrap any error type in a <code>LeaseRejected</code> error to be …\nWithdraw a connector from the set of connectors available …\nFractional scale handler type\nState of the wp_fractional_scale_manager_v1 Global\nState for the fractional scale\nType stored in WlSurface states data_map\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the fractional scale manager global.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate new <code>wp_fraction_scale_manager</code> global.\nA new fractional scale was instantiated\nReturns the current preferred scale\nSet the preferred scale\nRun a closure on the <code>FractionalScaleState</code> of a <code>WlSurface</code>\nHandler trait for idle-inhibit.\nState of the zwp_idle_inhibit_manager_v1 Global\nReturns the argument unchanged.\nReturns the fractional scale manager global.\nEnable idle inhibition for the output of the provided …\nidle-inhibit inhibitor.\nCalls <code>U::from(self)</code>.\nCreate new <code>zwp_idle_inhibit_manager</code> global.\nStop inhibition for the provided surface.\nState of zwp_idle_inhibitor_v1.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate <code>zwp_idle_inhibitor_v1</code> state.\nUser data of the <code>ExtIdleNotificationV1</code> resource\nHandler trait for ext-idle-notify\nState of ext-idle-notify module\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the <code>ExtIdleNotifierV1</code> global.\n<code>IdleNotifierState</code> getter\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs idle state inhibited, eg. by the idle-inhibit protocol\nCreate new <code>ExtIdleNotifierV1</code> global.\nShould be called whenever activity occurs on a seat, eg. …\nShould be called whenever activity occurs on a seat, eg. …\nInhibit entering idle state, eg. by the idle-inhibit …\nThe role of the input method popup.\nHandle to an input method instance\nAdds input method popup to compositor state\nUser data of ZwpInputKeyboardGrabV2 object\nData associated with a InputMethodManager global.\nState of wp misc input method protocol\nUser data of ZwpInputPopupSurfaceV2 object\nExtends Seat with input method functionality\nUser data of ZwpInputMethodV2 object\nParent surface and location for the IME popup.\nA handle to an input method popup surface\nIs the input method popup surface referred by this handle …\nDismiss a popup surface from the compositor state.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAccess to the parent surface associated with this popup\nGet the id of ZwpTextInputManagerV3 global\nGet an input method associated with this seat\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates that an input method has grabbed a keyboard\nUsed to access the location of an input popup surface …\nThe location of the parent surface.\nInitialize a text input manager global.\nAdd a popup surface to compositor state.\nSets the parent location so the popup surface can be …\nPopup location has changed.\nSet location of the popup surface relative to the parent. …\nSet the IME popup surface parent.\nSet relative location of text cursor.\nThe surface IME popup is present over.\nThe surface role for the input method popup\nThe region compositor shouldn’t obscure when placing the …\nAccess to the underlying <code>wl_surface</code> of this popup\nWP Keyboard shortcuts inhibit handler\nDelegate type for KeyboardShortcutsInhibit global.\nContext object for keyboard shortcuts inhibitor\nSeat extension used to check if shortcuts are inhibited\nUser data of ZwpKeyboardShortcutsInhibitorV1 object\nThis method indicates that the shortcut inhibitor is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nZwpKeyboardShortcutsInhibitManagerV1 GlobalId getter\nThis event indicates that the shortcuts inhibitor is …\nInhibitor got destoryed\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs inhibitor active\nKeyboardShortcutsInhibitState getter\nCheck if keyboard_shortcuts are inhibited\nGet inhibitors associated with given WlSurface\nRegiseter new ZwpKeyboardShortcutsInhibitManagerV1 global\nNew keyboard shortcuts inhibitor got created by the client\nSeat that is beeing inhibited\nSeat that is beeing inhibited\nEvents initiated by the clients interacting with outputs\nState of Smithay output manager\nUser data for WlOutput\nInternal data of a wl_output global\nUser data of Xdg Output\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate new output manager\nCreate new output manager with xdg output support\nA client bound a new <code>wl_output</code> instance.\nGet global id of xdg output manager\nPointer is confined to a region of the surface\nConstraint confining pointer to a region of the surface\nPointer is locked in place\nConstraint locking pointer in place\nA constraint imposed on the pointer instance\nA reference to a pointer constraint that can be activated …\nHandler for pointer constraints\nPointer constraints state.\nSend <code>locked</code>/<code>unlocked</code>\nPosition the client is rendering a cursor, if any\nSend <code>unlocked</code>/<code>unconfined</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the id of ZwpPointerConstraintsV1 global\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstraint is active\nCreate a new pointer constraints global\nPointer lock or confinement constraint created for <code>pointer</code> …\nRegion in which to confine the pointer\nRegion in which to activate the lock\nRegion in which to lock or confine the pointer\nGet constraint for surface and pointer, if any\nUser data of ZwpPointerGesture*V1 objects\nState of the pointer gestures\nReturns the argument unchanged.\nReturns the argument unchanged.\nZwpPointerGesturesV1 GlobalId getter\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRegister new ZwpPointerGesturesV1 global\nState of a single presentation feedback requested for a …\nHolds a single presentation feedback\nState for a single presentation feedback callback\nState of the wp_presentation global\nHolds the registered presentation feedbacks\nGet the id of the clock that was used at bind\nMark this callback as discarded\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the presentation global.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate new <code>WpPresentation</code> global.\nMark this callback as presented\nState of the relative pointer manager\nUser data of ZwpRelativePointerV1 object\nReturns the argument unchanged.\nReturns the argument unchanged.\nZwpRelativePointerV1 GlobalId getter\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRegister new ZwpRelativePointerV1 global\nWlSurface role of a cursor image icon\nUser data for keyboard\nUser data for pointer\nGlobal data of WlSeat\nUser data for seat\nUser data for touch\nFocused objects that <em>might</em> have an underlying wl_surface.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true, if the underlying wayland object originates …\nReturns the underlying wl_surface, if any.\nA security context associated with a listener created …\nUser data for a <code>WpSecurityContextManagerV1</code> global\nHandler for security context protocol\nSecurity context listener event source.\nState of the WpSecurityContextManagerV1 global\nUser data for a <code>WpSecurityContextV1</code>\nOpaque sandbox-specific ID for an application\nA client has created a security context. <code>source</code> is a …\nClient that created the security context\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWpSecurityContextManagerV1 GlobalId getter\nOpaque sandbox-specific ID for an instance of an …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRegister new WpSecurityContextManagerV1 global\nName of the sandbox engine associated with the security …\nThe target for the request is clipboard selection.\nThe target for the request is primary selection.\nEvents that are generated by interactions of the clients …\nThe source of the selection data.\nThe target for the selection request.\nUserData attached to server-side selections.\nUtilities for manipulating the data devices\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMime types associated with the source.\nA client has set the selection\nUtilities for manipulating the primary selection\nA client requested to read the server-set selection.\nAutomatic handling of the <code>wlr_data_control</code> protocol\nEvents that are generated during client initiated drag’n…\nWlSurface role of drag and drop icon\nEvents that are generated by interactions of the clients …\nState of data device\nRequested mime type is not available\nThere is no active selection\nErrors happening when requesting selection contents\nEvent generated by the interactions of clients with a …\nRequesting server side selection contents is not supported\nThe metadata describing a data source\nThe client can accept the given mime type.\nThe client chose an action\nAction chooser for DnD negociation\nThe Dnd was cancelled\nClear the current selection for this seat\nGets the user_data for the currently active selection, if …\nDataDeviceState getter\nA simple action chooser for DnD negociation\nThe Drag’n’Drop actions supported by this source\nThe drag’n’drop action was finished by the user …\nThe DnD resource was dropped by the user\nThe client has finished interacting with the resource\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWlDataDeviceManager GlobalId getter\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe MIME types supported by this source\nRegiseter new WlDataDeviceManager global\nRequest the current data_device selection of the given seat\nThe client requested for data to be sent\nSet the data device focus to a certain client for a given …\nSet a compositor-provided selection for this seat\nStart a drag’n’drop from a resource controlled by the …\nA client started a drag’n’drop as response to a user …\nAccess the metadata of a data source\nRequested mime type is not available\nThere is no active selection\nAccess the primary selection state.\nState of the primary selection.\nErrors happening when requesting selection contents\nRequesting server side selection contents is not supported\nThe metadata describing a data source\nClear the current selection for this seat\nGets the user_data for the currently active selection, if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>PrimaryDeviceManager</code> GlobalId getter\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe MIME types supported by this source\nRegister new <code>PrimaryDeviceManager</code> global\nPrimarySelectionState getter.\nRequest the current primary selection of the given seat to …\nSet the primary selection focus to a certain client for a …\nSet a compositor-provided primary selection for this seat\nAccess the data control state.\nState of the data control.\n<code>DataControlState</code> getter.\nReturns the argument unchanged.\nZwlrDataControlManagerV1  GlobalId getter.\nCalls <code>U::from(self)</code>.\nRegister new ZwlrDataControlManagerV1 global.\nUser data for ext-session-lock surfaces.\nHandle for a ext-session-lock surface.\nState of an ext-session-lock surface.\nHandler trait for ext-session-lock.\nState of the <code>ExtSessionLockManagerV1</code> Global.\n<code>ExtSessionLockV1</code> state.\nManage session locking.\nA surface has acknowledged a configure serial.\nCheck if the surface is still alive.\nGet the current pending state.\nGet the underlying <code>ExtSessionLockV1</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the current pending configure state.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHandle compositor locking requests.\nNotify the client that the session lock was successful.\nSession lock state.\nCreate new <code>ExtSessionLockManagerV1</code> global.\nAdd a new lock surface for an output.\nSend a configure to the surface.\nThe suggested size of the surface.\nHandle compositor lock removal.\nManipulate this surface’s pending state.\nAccess the underlying <code>WlSurface</code>.\nThe operation failed because the underlying surface has …\nThere is already a pending ping\nRepresents the possible errors returned from a surface ping\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true if the surface is toplevel equivalent.\nHandler utilities for KDE shell protocols.\nUtilities for handling shell surfaces with the …\nUtilities for handling shell surfaces with the <code>xdg_shell</code> …\nKDE Window decoration manager\nKDE server decoration handler.\nData associated with a KdeDecorationManager global.\nKDE server decoration state.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the id of the <code>OrgKdeKwinServerDecorationManager</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the KDE server decoration state.\nCreate a new KDE server decoration global.\nHandle new decoration object creation.\nCreate a new KDE server decoration global with a filter.\nHandle decoration object removal for a surface.\nHandle surface decoration mode requests.\nAnchor bitflags, describing how the layers surface should …\nThe bottom edge of the anchor rectangle\nThe lowest layer, used usualy for wallpapers\nThe layer bellow the windows and above the wallpaper\nIf set to DontCare, the surface indicates that it would …\nRequest exclusive keyboard focus if this surface is above …\nRequests that the compositor avoids occluding an area with …\nExclusive zone descriptor\nTypes of keyboard interaction possible for a layer shell …\nThe role of a wlr_layer_shell_surface\nThe left edge of the anchor rectangle\nAvailable layers for surfaces\nA handle to a layer surface\nAttributes for layer surface\nRepresents the client pending state\nA configure message for layer surfaces\nData associated with XDG popup surface\nState of a layer surface\nDescribes distance from the anchor point of the output, in …\nIf set to Neutral, the surface indicates that it would …\nThis value indicates that this surface is not interested …\nThis requests the compositor to allow this surface to be …\nThe top layer above all other layers\nThe right edge of the anchor rectangle\nThe top edge of the anchor rectangle\nThe layer above the windows and bellow overlay\nData associated with a layer shell global\nHandler for wlr layer shell\nShell global state\nUser data for wlr layer surface\nA surface has acknowledged a configure serial.\nChecks if the surface is still alive\nGet a flags value with all known bits set.\nAnchor bitflags, describing how the layers surface should …\nCheck if anchored horizontally\nCheck if anchored vertically\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nDistance from <code>Anchor::BOTTOM</code>\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe serial of the last acked configure\nDefines if the surface has received at least one …\nWhether all set bits in a source flags value are also set …\nHolds the current state of the layer after a successful …\nGets a copy of the current state of this layer\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nMake sure this surface was configured\nDescripton of exclusive zone\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nTests this <code>LayerSurface</code> for pending changes\nHolds the state if the surface has sent the initial …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nDescribes how keyboard events are delivered to this surface\nHolds the last server_pending state that has been …\nThe layer that the surface is rendered on\nA layer surface was destroyed.\nAccess all the shell surfaces known by this handler\nDistance from <code>Anchor::LEFT</code>\nDescribes distance from the anchor point of the output\nCreate a new <code>wlr_layer_shell</code> global\nA new layer surface was created\nA new popup was assigned a layer surface as it’s parent\nCreate a new <code>wlr_layer_shell</code> global with a client filter\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nDistance from <code>Anchor::TOP</code>\nSend a “close” event to the client\nSend a configure event to this layer surface to suggest it …\nSend a pending configure event to this layer surface to …\nA serial number to track ACK from the client\nHolds the pending state as set by the server.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nGet shell global id\nWlrLayerShellState getter\nThe suggested size of the surface\nThe size requested by the client\nThe state associated with this configure\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nDistance from <code>Anchor::TOP</code>\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nAllows the pending state of this layer to be manipulated.\nAccess the underlying <code>wl_surface</code> of this layer surface\nThe popup has already been configured and the protocol …\nDefines the possible configure variants for a XdgSurface …\nThe popup is not allowed to be re-configured, the …\nA xdg_surface with a role of xdg_popup has processed an …\nA configure message for popup surface\nRepresents the possible errors that can be returned from …\nRepresents the state of the popup\nA handle to a popup surface\nThe state of a positioner, as set by the client\nA shell client\nRepresents the client pending state\nA xdg_surface with a role of xdg_toplevel has processed an …\nA configure message for toplevel surfaces\nState of a regular toplevel surface\nContainer holding the states for a <code>XdgToplevel</code>\nA handle to a toplevel surface\nContainer holding the <code>xdg_toplevel::WmCapabilities</code> for a …\nThe role of an XDG popup surface.\nThe role of an XDG toplevel surface.\nData associated with XDG popup surface\nRole specific attributes for xdg_popup\nUser data for Xdg Positioner\nXdg Shell handler type\nShell global state\nUser data of xdg toplevel surface\nUser data of XdgSurface\nData associated with XDG toplevel surface\nRole specific attributes for xdg_toplevel\nUser data for Xdg Wm Base\nA surface has acknowledged a configure serial.\nIs the shell client represented by this handle still …\nIs the toplevel surface referred by this handle still …\nIs the toplevel surface referred by this handle still …\nEdges defining the anchor point\nAnchor rectangle in the parent surface coordinates …\nHolds the optional app ID the client has set for this …\nThe toplevel surface set a different app id.\nThe bounds for this toplevel\nReturns the raw <code>xdg_toplevel::WmCapabilities</code> stored in …\nThe wm capabilities for this toplevel\nRetrieve the shell client owning this toplevel surface\nRetrieve the shell client owning this popup surface\nA shell client was destroyed.\nThe pong for a pending ping of this shell client was …\nDefines if the surface has received at least one commit\nThe serial of the last acked configure\nThe serial of the last acked configure\nDefines if the surface has received at least one …\nDefines if the surface has received at least one …\nAdjustments to do if previous criteria constrain the …\nReturns <code>true</code> if the states contains a state.\nReturns <code>true</code> if the set contains a capability.\nHolds the current state after a successful commit.\nHolds the current state after a successful commit.\nGets the latest state that has been configured on the …\nGets the latest state that has been configured on the …\nGets a copy of the current state of this toplevel\nXDG Window decoration manager\nThe xdg decoration mode of the surface\nXDG Dialog Windows\nMake sure this surface was configured\nMake sure this surface was configured\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe output for a fullscreen display\nA toplevel surface requested to be set fullscreen\nHolds the geometry of the popup as defined by the …\nHolds the double-buffered geometry that may be specified …\nGet the geometry for a popup as defined by this positioner.\nGets a reference of the parent WlSurface of this popup.\nReturns a <code>PopupSurface</code> from an underlying popup surface.\nReturns a <code>ToplevelSurface</code> from an underlying toplevel …\nGet the geometry for a popup as defined by this …\nReturns the xdg shell global.\nThis popup requests a grab of the pointer\nGravity direction for positioning the child surface …\nCheck if the state has pending changes that have not been …\nCheck if the state has pending changes that have not been …\nTests this <code>ToplevelSurface</code> for pending changes\nTests this <code>PopupSurface</code> for pending changes\nHolds the state if the surface has sent the initial …\nHolds the state if the surface has sent the initial …\nAn <code>zxdg_toplevel_decoration_v1::configure</code> event has been …\nAn <code>zxdg_toplevel_decoration_v1::configure</code> event has been …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHolds the last server_pending state that has been …\nHolds the last server_pending state that has been …\nMaximum size requested for this surface\nA toplevel surface requested to be maximized\nMinimum size requested for this surface\nA toplevel surface requested to be minimized\nHints that the dialog has “modal” behavior. Modal …\nThe client requested the start of an interactive move for …\nCreate a new <code>xdg_shell</code> global with all <code>WmCapabilities</code>\nA new shell client was instantiated\nA new popup surface was created\nA new toplevel surface was created\nCreate a new <code>xdg_shell</code> global with a specific set of …\nOffset placement relative to the anchor point\nReturns the parent of this toplevel surface.\nThe parent field of a toplevel should be used by the …\nHolds the parent for the xdg_popup.\nThe serial of an xdg_surface.configure event this …\nThe parent window geometry the compositor should use when …\nA popup surface was destroyed.\nAccess all the popup surfaces known by this handler\nThe positioner state can be used by the compositor to …\nWhen set reactive, the surface is reconstrained if the …\nSize of the rectangle that needs to be positioned\nReplace all capabilities in this set\nReplace the capabilities of this global\nA client requested a reposition, providing a new …\nThe token the client provided in the <code>xdg_popup::reposition</code> …\nThe client requested the start of an interactive resize …\nSend a “close” event to the client\nSend a configure event to this toplevel surface to suggest …\nSend a configure event to this popup surface to suggest it …\nSend a pending configure event to this toplevel surface to …\nSend a pending configure event to this popup surface to …\nSend a ping request to this shell client\nSend a <code>popup_done</code> event to the popup surface\nSend a configure event, including the <code>repositioned</code> event …\nA serial number to track ACK from the client\nA serial number to track ACK from the client\nHolds the pending state as set by the server.\nHolds the pending state as set by the server.\nAdds a state to the states.\nAdds a capability to the set.\nSets the parent of this toplevel surface and returns …\nThe client requests the window menu to be displayed on …\nThe suggested size of the surface\nThe state associated with this configure\nThe state associated with this configure\nThe states for this surface\nHolds the optional title the client has set for this …\nThe toplevel surface set a different title.\nA toplevel surface was destroyed.\nAccess all the shell surfaces known by this handler\nA toplevel surface request to stop being fullscreen\nA toplevel surface requested to stop being maximized\nKill the shell client for being unresponsive.\nRemoves a state from the states. Returns whether the state …\nRemoves a capability from the set. Returns whether the …\nSupported XDG shell protocol version.\nAccess the user data associated with this shell client\nAllows the pending state of this toplevel to be …\nAllows the pending state of this popup to be manipulated.\nAccess the underlying <code>wl_surface</code> of this toplevel surface\nAccess the underlying <code>wl_surface</code> of this popup surface\nAccess the underlying <code>xdg_popup</code> of this popup surface\nXdgShellState getter\nAccess the underlying <code>xdg_toplevel</code> of this toplevel surface\nHandler trait for xdg decoration events.\nData associated with a XdgDecorationManager global.\nDelegate type for handling xdg decoration events.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the xdg-decoration global.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new delegate type for handling xdg decoration …\nNotification the client supports server side decoration on …\nCreates a new delegate type for handling xdg decoration …\nNotification the client prefers the provided decoration …\nNotification the client does not prefer a particular …\nHandler trait for xdg dialog events.\nDelegate type for handling xdg dialog events.\nReturns the argument unchanged.\nReturns the xdg-wm-dialog global.\nCalls <code>U::from(self)</code>.\nDoes client want to be presented as a modal dialog\nCreates a new delegate type for handling xdg dialog events.\nAn error occurred while accessing the memory map\nError that can occur when accessing an SHM buffer\nDetails of the contents of a buffer relative to its pool\nThis buffer is not managed by the SHM handler\nThis buffer cannot be read by the compositor\nThis buffer cannot be written to by the compositor\nUser data of shm WlBuffer\nShm global handler\nUser data of WlShmPool\nState of SHM module\nFormat used by this buffer\nConvert from a <code>Fourcc</code> format to a wl_shm format\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the id of the <code>WlShm</code> global.\nHeight of the buffer in bytes\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new SHM global advertizing the given formats.\nOffset of the start of the buffer relative to the …\nConvert from a wl_shm format to a <code>Fourcc</code> format\nReturn the Shm global state\nStride of the buffer in bytes\nUpdates the list of formats advertised by the global.\nWidth of the buffer in bytes\nCall given closure with the contents of the given buffer\nCall given closure with the contents of the given buffer …\nReturns the bpp of the format\nA Wayland listening socket event source.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new listening socket, automatically choosing the …\nReturns the name of the listening socket.\nCreates a new listening socket with the specified name.\nDescription of graphics tablet device\nHandle to a tablet device\nState of wp tablet protocol\nHandle to a tablet seat\nHandler trait for Tablet Seats\nExtends Seat with graphic tablet specific functionality\nUser data of ZwpTabletSeatV2 object\nHandle to a tablet tool device\nUser data of ZwpTabletToolV2 object\nUser data of ZwpTabletV2 object\nAdd a new tablet to a seat.\nAdd a new tool to a seat.\nButton on the tool was pressed or released\nRemove all tablet devices\nRemove all tablet tool devices\nCount all tablet devices\nCount all tablet tool devices\nQueue tool distance update\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a handle to a tablet\nGet a handle to a tablet tool\nGet the id of ZwpTabletManagerV2 global\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNotify that the tool moved\nTablet device name\nInitialize a tablet manager global.\nQueue tool pressure update\nNotify that this tool is focused on a certain surface.\nNotify that this tool has left proximity.\nRemove tablet device\nRemove tablet tool device\nQueue tool rotation update\nQueue tool slider update\nPath to the device\nGet tablet seat associated with this seat\nCallback that will be notified whenever a client requests …\nCallback that will be notified whenever a client requests …\nQueue tool tilt update\nTablet tool is making contact\nTablet tool is no longer making contact\nTablet device USB (product,vendor) id\nQueue tool wheel update\nHandle to text input instances\nState of wp text input protocol\nExtends Seat with text input functionality\nUser data of ZwpTextInputV3 object\nThe <code>discard_state</code> is used when the input-method signaled …\nSend <code>enter</code> on the text-input instance for the currently …\nReturn the currently focused surface.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the id of ZwpTextInputManagerV3 global\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSend <code>leave</code> on the text-input instance for the currently …\nInitialize a text input manager global.\nAdvance the focus for the client to <code>surface</code>.\nGet text input associated with this seat\nAccess the text-input instance for the currently focused …\nRepresents the double-buffered viewport state of a …\nState of a single viewport attached to a surface\nState of the wp_viewporter Global\nDefines the destination <code>Size</code> of the <code>WlSurface</code> in <code>Logical</code> …\nEnsures that the viewport, if any, is valid accordingly to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the viewporter global.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate new <code>wp_viewporter</code> global.\nGets the actual size the <code>WlSurface</code> should have on screen in\nDefines the source <code>Rectangle</code> of the <code>WlSurface</code> in <code>Logical</code> …\nData associated with a VirtualKeyboardManager global.\nState of wp misc virtual keyboard protocol\nUser data of ZwpVirtualKeyboardV1 object\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the id of ZwpVirtualKeyboardManagerV1 global\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitialize a virtual keyboard manager global.\nData assoicated with an activation token protocol object.\nA trait implemented to be notified of activation requests …\nTracks the list of pending and current activation requests\nContains the unique string token of activation request\nActivation data asosiated with the <code>XdgActivationToken</code>\nReturns the activation state.\nThe requesting client can specify an app_id to associate …\nExtracts a string slice containing the entire token.\nClient that requested the token\nCreate a token without any client association, e.g. for …\nAccess the data of a known token\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the xdg activation global.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new xdg activation global.\nRemoves an activation token from the internal storage.\nA client has requested surface activation.\nRetain pending tokens\nProvides information about the seat and serial event that …\nThe surface requesting the activation.\nTimestamp of the token\nA client has created a new token.\nAdditional user data attached\nUser data of xdg_exported\nA trait implemented to be notified of activation requests …\nTracks the list of exported surfaces\nUser data of xdg_imported\nReturns the xdg_exporter global.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the xdg_importer global.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new xdg activation global.\nReturns the xdg foreign state.\nA grab created by xwayland keyboard grab protocol.\nHandler for xwayland keyboard grab protocol\nState of the xwayland keyboard grab global\nReturns the argument unchanged.\nReturns the argument unchanged.\nZwpXwaylandKeyboardGrabV1 GlobalId getter\nXWayland client has requested a keyboard grab for <code>surface</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDefines what <code>KeyboardFocus</code> an <code>XWaylandKeyboardGrab</code> can use …\nRegister new ZwpXwaylandKeyboardGrabManagerV1 global\nThe role for an xwayland-associated surface.\nRepresents a pending X11 serial, used to associate X11 …\nHandler for the xwayland shell protocol.\nThe global for the xwayland shell protocol.\nUserdata for an xwayland shell surface.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieve a handle for the XwaylandShellV1 global.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRegisters a new XwaylandShellV1 global. Only XWayland …\nThe serial of the matching X11 window.\nAn X11 window has been associated with a wayland surface. …\nRetrieves the surface for a given serial.\nRetrieves the global state.\nThe XWayland server exited unexpectedly during startup.\nThe XWayland server is ready\nA handle to a running XWayland process. Using XWayland as …\nInner <code>ClientData</code>-type of an xwayland client.\nEvents generated by an XWayland instance.\nclient state of the <code>crate::wayland::compositor</code> module\nReturns the X11 display used by the instance, suitable for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a file descriptor which can be polled for …\nSpawns an XWayland server instance. <code>Xwayland</code> must be on …\nChecks if the XWayland instance is ready. If XWayland has …\nAccess user_data map for a xwayland client\nXwayland Window Manager module\nThe display number the XWayland server is using.\nA privileged X11 connection to XWayland.\ndirectly above the given window id\nAtoms used by the XWM and X11Surface types\ndirectly below the given window id\nto the bottom of the stack\nCalloop error occured trying to register transfer with …\nError on the underlying X11 Connection\nWindow asks to be re-stacked\nEdge values for resizing\nErrors generated working with Xwm Selections\nto the top of the stack\nUnable to determine internal Atom for given mime-type\nOperation was unsupported for an override_redirect window\nWindow properties of <code>X11Surface</code>s\nWindow types of <code>X11Surface</code>s\nX11 Error occured setting the selection\nTrait for objects, that represent an x11 window in some …\nX11 window managed by an <code>X11Wm</code>\nErrors that can happen for operations on an <code>X11Surface</code>\nThe runtime state of an reparenting XWayland window …\nX11 wl_surface role\nHandler trait for X11Wm interactions\nId of an X11 WM\nReturns if the window is still alive\nWindow requests access to the given selection.\nReturns the suggested base size of the underlying X11 …\nReturns the current window class of the underlying X11 …\nA proviously set selection of an X client got cleared\nSend a close request to this window.\nThis function has to be called on <code>CompositorHandler::commit</code>…\nSend a configure to this window.\nWindow was reconfigured.\nWindow asks to be positioned or sized differently.\nWindow was destroyed\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWindow requests to be fullscreened.\nReturns the current geometry of the underlying X11 window\nId of this X11 WM\nReturns the current window instance of the underlying X11 …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns if the window is in the activated state\nReturns true if the window is client-side decorated\nReturns if the window is in the fullscreen state\nReturns if the window is currently mapped or not\nReturns if the window is in the maximized state\nReturns if the window is in the minimized state\nReturns if this window has the override redirect flag set …\nReturns if the window is considered to be a popup.\nReturns if the underlying window is transient to another …\nReturns if this object is considered to represent the same …\nNotification a window was mapped sucessfully and now has a …\nWindow requests to be mapped.\nOverride redirect window was mapped.\nX11 protocol id of the reparented window, if any\nReturns the suggested minimum size of the underlying X11 …\nWindow requests to be maximized.\nReturns the suggested minimum size of the underlying X11 …\nWindow requests to be minimized.\nWindow requests to be moved.\nCreate a new <code>X11Surface</code> usually handled by an <code>X11Wm</code>\nA new X11 window with the override redirect flag.\nA new selection was set by an X client with provided …\nNotify Xwayland of a new selection.\nA new X11 window was created.\nA window property has changed.\nRaises a window in the internal X11 state\nWindow requests to be resized.\nThe given selection is being read by an X client and needs …\nRequest to transfer the active <code>selection</code> for the provided …\nSets the window as activated or not.\nSet the default cursor used by X clients.\nSets the window as fullscreen or not.\nSet the X11 windows as mapped/unmapped affecting its …\nSets the window as maximized or not.\nSets the window as minimized or not.\nReturns the size hints for the underlying X11 window\nStart a new window manager for a given Xwayland connection\nReturns the startup id of the underlying X11 window\nReturns the current title of the underlying X11 window\nWindow requests to be unfullscreened.\nWindow was unmapped.\nWindow requests to be unmaximized.\nWindow requests to be unminimized.\nUpdates the stacking order by matching provided windows …\nUpdates the stacking order by moving provided windows …\nRetrieve user_data associated with this X11 window\nX11 protocol id of the underlying window\nReturns the reported window type of the underlying X11 …\nReturns the associated wl_surface.\nReturns the associated <code>wl_surface</code> id, once it has been set …\nReturns the associated <code>wl_surface</code> serial, once it has been …\nReturns the id of the X11Wm responsible for this surface, …\n<code>X11Wm</code> getter for a given ID.")