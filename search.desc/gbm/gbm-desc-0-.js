searchState.loadedDescShard("gbm", 0, "Safe <code>libgbm</code> bindings for rust\nTrait for types that allow to obtain the underlying raw …\nA GBM buffer object\nFlags to indicate the intended use for the buffer - these …\nAbstraction representing the handle to a buffer allocated …\nBuffer is going to be used as cursor\nBuffer is going to be used as cursor (deprecated)\nDevice was already released\nAn open GBM device\nThe underlying device has been destroyed\nThrown when the underlying GBM device was already destroyed\nThrown when an error occurs during getting a bo fd\nErrors that may happen when locking the front buffer\nThe operation returned an invalid fd\nThrown when the fd is invalid\nBuffer is linear, i.e. not tiled.\nA mapped buffer object\nBuffer is protected\nBuffer is to be used for rendering - for example it is …\nBuffer is going to be presented to the screen using an API …\nA GBM rendering surface\nAn unknown error happened\nBuffer can be used for <code>BufferObject::write()</code>.  This is …\nThrown when the GBM device does not belong to the buffer …\nGet a flags value with all known bits set.\nReceive a raw pointer representing this type.\nGet the backend name\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nGet the bits per pixel of the buffer object\nAccess to the underlying image buffer\nMutable access to the underlying image buffer\nClears the set userdata of the buffer object.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nAllocate a buffer object for the given dimensions\nAllocate a buffer object for the given dimensions with …\nAllocate a buffer object for the given dimensions with …\nAllocate a new surface object\nAllocate a new surface object with explicit modifiers\nAllocate a new surface object with explicit modifiers and …\nGet the file descriptor of the gbm device of this buffer …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a DMA-BUF file descriptor for the buffer object\nGet a DMA-BUF file descriptor for a plane of the buffer …\nGet the format of the buffer object\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from an u64\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet the handle of the buffer object\nGet the handle of a plane of the buffer object\nReturn whether or not a surface has free (non-locked) …\nGet the height of the buffer object\nThe height of the mapped region for the buffer\nCreate a GBM buffer object from a dma buffer\nCreate a GBM buffer object from a dma buffer with explicit …\nCreate a GBM buffer object from a wayland buffer\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nTest if a format is supported for a given set of usage …\nYield a set of contained flags values.\nYield a set of contained named flags values.\nLock the surface’s current front buffer\nMap a region of a GBM buffer object for cpu access\nMap a region of a GBM buffer object for cpu access\nGet the modifier of the buffer object\nOpen a GBM device from a given open DRM device.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nGet the offset for a plane of the buffer object\nGet the plane count of the buffer object\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets the userdata of the buffer object.\nGet the stride of the buffer object\nGet the stride of the buffer object\nGet the stride of the buffer object\nGet the string representation of the format’s fourcc.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTakes ownership of previously set userdata, if any.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nConvert from an u32\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns a reference to set userdata, if any.\nReturns a mutable reference to set userdata, if any.\nGet the vendor of the modifier, if any\nGet the width of the buffer object\nThe width of the mapped region for the buffer\nWrite data into the buffer object\nThe X (top left origin) starting position of the mapped …\nThe Y (top left origin) starting position of the mapped …")