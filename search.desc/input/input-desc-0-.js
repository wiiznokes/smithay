searchState.loadedDescShard("input", 0, "Libinput bindings for rust\nPointer Acceleration Profile\nAn adaptive acceleration profile.\nTrait for types that allow to optain the underlying raw …\nUse software-button areas (see Clickfinger behavior) to …\nCaps Lock Led\nThe click method defines when to generate software-emulated\nThe number of fingers decides which button press to …\nTrait to receive the underlying context\nDo not send events through this device.\nIf an external pointer device is plugged in, do not send …\nRepresentation of a single input device as seen by the …\nCapabilities on a device.\nErrors returned when applying configuration settings.\nResult returned when applying configuration settings.\nDevice group\nSend events from this device normally.\nSend scroll events when a finger moves along the bottom or …\nContains the error value\nA flat acceleration profile.\nTrait for types that allow to be initialized from a raw …\nGesture capability\nInvalid parameter range.\nKeyboard capability\nMask reflecting LEDs on a device.\n1/2/3 finger tap maps to left/middle/right\n1/2/3 finger tap maps to left/right/middle\nLibinput context\nlibinput does not open file descriptors to devices …\nNum Lock Led\nNever send scroll events instead of pointer motion events.\nContains the success value\nSend scroll events when a button is down and the device …\nPointer capability\nScroll Lock Led\nWhenever scroll button lock is enabled or not\nThe scroll method of a device selects when to generate …\nA seat has two identifiers, the physical name and the …\nThe send-event mode of a device defines when a device may …\nSwitch capability\nTabletPad capability\nTabletTool capability\nMap 1/2/3 finger tips to buttons\nTouch capability\nSend scroll events when two fingers are logically down on …\nConfiguration not available on this device.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nReceive a raw pointer representing this type.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nClose the file descriptor.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturn the default pointer acceleration profile for this …\nReturn the default speed setting for this device, …\nCheck if a device uses libinput-internal …\nGet the current pointer acceleration profile for this …\nReturns a bitmask of the configurable acceleration modes …\nSet the pointer acceleration profile of this pointer …\nSet the pointer acceleration speed of this pointer device …\nGet the current pointer acceleration setting for this …\nReturn the default calibration matrix for this device.\nCheck if the device can be calibrated via a calibration …\nReturn the current calibration matrix for this device.\nApply the 3x3 transformation matrix to absolute device …\nGet the default button click method for this device.\nGet the button click method for this device.\nCheck which button click methods a device supports.\nSet the button click method for this device.\nCheck if the disable-while typing feature is enabled on …\nCheck if the disable-while typing feature is currently …\nCheck if this device supports configurable …\nEnable or disable the disable-while-typing feature.\nGet the current left-handed configuration of the device.\nGet the default left-handed configuration of the device.\nCheck if a device has a configuration that supports …\nSet the left-handed configuration of the device.\nCheck if configurable middle button emulation is enabled by\nCheck if configurable middle button emulation is enabled on\nCheck if middle mouse button emulation configuration is …\nEnable or disable middle button emulation on this device.\nGet the current rotation of a device in degrees clockwise …\nGet the default rotation of a device in degrees clockwise …\nCheck whether a device can have a custom rotation applied.\nSet the rotation of a device in degrees clockwise off the …\nGet the button for the <code>ScrollMethod::OnButtonDown</code> method …\nGet the current scroll button lock state\nGet the default button for the <code>ScrollMethod::OnButtonDown</code> …\nGet the default scroll button lock state\nGet the default scroll method for this device.\nGet the default mode for scrolling on this device.\nReturn non-zero if the device supports “natural scrolling…\nGet the scroll method for this device.\nCheck which scroll methods a device supports.\nGet the current mode for scrolling on this device.\nSet the button for the <code>ScrollMethod::OnButtonDown</code> method …\nSet the scroll button lock.\nSet the scroll method for this device.\nEnable or disable natural scrolling on the device.\nGet the send-event mode for this device.\nReturn the possible send-event modes for this device.\nSet the send-event mode for this device.\nGet the finger number to button number mapping for …\nGet the default finger number to button number mapping for …\nReturn whether tap-and-drag is enabled or disabled by …\nCheck if drag-lock during tapping is enabled by default on …\nReturn the default setting for whether tap-to-click is …\nReturn whether tap-and-drag is enabled or disabled on this …\nCheck if drag-lock during tapping is enabled on this …\nCheck if tap-to-click is enabled on this device.\nCheck if the device supports tap-to-click and how many …\nSet the finger number to button number mapping for …\nEnable or disable tap-and-drag on this device.\nEnable or disable drag-lock during tapping on this device.\nEnable or disable tap-to-click on this device, with a …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nReturns the underlying libinput context\nGet the libinput context from the device.\nGet the libinput context from the seat.\nGet the device group this device is assigned to.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nMain event dispatchment function.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nLibinput Events\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nlibinput keeps a single file descriptor for all events.\nUnsafe raw C API.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nCreate a new instance of this type from a raw pointer and …\nCreate a new instance of this type from a raw pointer.\nCheck if the given device has the specified capability.\nGet the product ID for this device.\nGet the vendor ID for this device.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nCheck if a <code>DeviceCapability::Keyboard</code> device has a key with\nUpdate the LEDs on the device, if any.\nReturn the logical name of the seat.\nThe descriptive device name as advertised by the kernel …\nCreate a new libinput context that requires the caller to …\nCreate a new libinput context using a udev context.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nOpen the device at the given path with the flags provided …\nA device may be mapped to a single output, or all available\nAdd a device to a libinput context initialized with …\nRemove a device from a libinput context initialized with …\nReturn the physical name of the seat.\nCheck if a <code>DeviceCapability::Pointer</code> device has a button …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nResume a suspended libinput context.\nGet the seat associated with this input device, see Seats …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nChange the logical seat associated with this device by …\nGet the physical size of a device in mm, where meaningful.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nSuspend monitoring for new devices and close existing …\nCheck if a <code>DeviceCapability::Switch</code> device has a switch of …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nGet the system name of the device.\nCheck if a <code>DeviceCapability::TabletPad</code>-device has a key …\nReturn the current mode this mode group is in.\nReturn the number of buttons on a device with the …\nMost devices only provide a single mode group, however …\nReturn the number of rings a device with the …\nReturn the number of strips a device with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nCheck how many touches a <code>DeviceCapability::Touch</code>-exposing …\nAssign a seat to this libinput context.\nReturn a udev handle to the device that is this libinput …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nA device related <code>Event</code>\nA libinput <code>Event</code>\nCommon functions all (Sub-)Events implement.\nA gesture related <code>Event</code>\nA keyboard related <code>Event</code>\nA pointer related <code>Event</code>\nA switch related <code>Event</code>\nA tablet related <code>Event</code>\nA tabled pad related <code>Event</code>\nA touch related <code>Event</code>\nDevice event types\nReturn the device associated with this event.\nReturns the argument unchanged.\nGesture event types\nCalls <code>U::from(self)</code>.\nConvert into a general <code>Event</code> again\nKeyboard event types\nPointer event types\nSwitch event types\nTablet pad event types\nTablet tool event types\nTouch event types\nSignals that a device has been added to the context.\nSignals that a device has been added to the context.\nA device related <code>Event</code>\nCommon functions all Device-Events implement.\nSignals that a device has been removed.\nSignals that a device has been removed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into a general <code>DeviceEvent</code> again\nSwipe gesture began\nPinch gesture began\nHold gesture began\nSwipe gesture ended\nPinch gesture ended\nHold gesture ended\nCommon functions for events noting the end of a gesture\nA gesture related <code>Event</code>\nCommon functions for Gesture-Events having coordinates.\nCommon functions all Gesture-Events implement.\nHold gesture began\nHold gesture ended\nEvents for hold gestures\nCommon functions for hold gesture events\nPinch gesture began\nPinch gesture ended\nEvents for pinch gestures\nCommon functions for pinch gesture events\nIn-progress pinch gesture updated\nSwipe gesture began\nSwipe gesture ended\nEvents for swipe gestures\nCommon functions for swipe gesture events\nIn-progress swipe gesture updated\nA hold gesture <code>Event</code>\nA pinch gesture <code>Event</code>\nA swipe gesture <code>Event</code>\nIn-progress swipe gesture updated\nIn-progress pinch gesture updated\nReturn the angle delta in degrees between the last and the …\nReturn if the gesture ended normally, or if it was …\nReturn the delta between the last event and the current …\nReturn the relative delta of the unaccelerated motion …\nReturn the delta between the last event and the current …\nReturn the relative delta of the unaccelerated motion …\nReturn the number of fingers used for a gesture.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into a general <code>GestureEvent</code> again\nConvert into a general <code>GesturePinchEvent</code>\nConvert into a general <code>GesturePinchEvent</code>\nConvert into a general <code>GestureSwipeEvent</code>\nReturn the absolute scale of a pinch gesture, the scale is …\nThe event time for this event\nThe event time for this event in microseconds\nAn event related to pressing a key\nState of a Key\nA keyboard related <code>Event</code>\nCommon functions for all Keyboard-Events implement.\nAn event related to pressing a key\nKey is pressed\nKey is released\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into a general <code>KeyboardEvent</code> again\nThe keycode that triggered this key event\nThe state change of the key\nFor the key of a <code>KeyboardKeyEvent</code> event, return the total …\nThe event time for this event\nThe event time for this event in microseconds\nAxes on a device with the pointer capability that are not  …\nAn event related to moving axis on a pointer device\nThe source for a <code>PointerAxisEvent</code>.\nAn event related to button pressed on a pointer device\nState of a Button\nThe event is caused by the motion of some device.\nThe event is caused by the movement of one or more fingers …\nHorizontal axis\nAn event related to moving a pointer\nAn event related to absolute pointer movement\nAn event related to moving axis on a pointer device\nAn event related to button pressed on a pointer device\nA pointer related <code>Event</code>\nCommon functions for all Pointer-Events implement.\nAn event related to absolute pointer movement\nAn event related to moving a pointer\nAn event related to a continuous scroll source on a …\nCommon functions of PointerScroll type events\nAn event related to moving a finger on a pointer device\nAn event related to moving a scroll whell on a pointer …\nButton is pressed\nButton is released\nA scroll event from a continuous scroll source, e.g. …\nA scroll event caused by the movement of one or more …\nA scroll event from a wheel.\nVertical axis\nThe event is caused by the rotation of a wheel.\nThe event is caused by the tilting of a mouse wheel rather …\nReturn the current absolute x coordinate of the pointer …\nReturn the current absolute x coordinate of the pointer …\nReturn the current absolute y coordinate of the pointer …\nReturn the current absolute y coordinate of the pointer …\nReturn the source for a given axis event.\nReturn the axis value of the given axis.\nReturn the axis value in discrete steps for a given axis …\nReturn the button that triggered this event.\nReturn the button state that triggered this event.\nReturn the delta between the last event and the current …\nReturn the relative delta of the unaccelerated motion …\nReturn the delta between the last event and the current …\nReturn the relative delta of the unaccelerated motion …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCheck if the event has a valid value for the given axis.\nCheck if the event has a valid value for the given axis.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into a general <code>TouchEvent</code> again\nReturn the axis value of the given axis.\nReturn the axis value as a v120-normalized value, that …\nFor the button returns the total number of buttons pressed …\nThe event time for this event\nThe event time for this event in microseconds\nThe laptop lid was closed when the <code>SwitchState</code> is <code>On</code>, or …\nSwitch is off\nSwitch is on\nTypes of Switches\nA switch related <code>Event</code>\nCommon functions all Switch-Events implement.\nState of a Switch\nAn event related a switch, that was toggled\nThis switch indicates whether the device is in normal …\nAn event related a switch, that was toggled\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into a general <code>SwitchEvent</code> again\nReturn the switch that triggered this event.\nReturn the switch state that triggered this event.\nThe event time for this event\nThe event time for this event in microseconds\nA button pressed on a device with the …\nFinger source\nFinger source\nA key pressed on a device with the …\nA status change on a tablet ring with the …\nThe source for a <code>TabletPadRingEvent</code> event.\nA status change on a strip on a device with the …\nThe source for a <code>TabletPadStripEvent</code> event.\nA button pressed on a device with the …\nA tablet-pad related <code>Event</code>\nCommon functions all TabletPad-Events implement.\nA key pressed on a device with the …\nA mode on a tablet pad is a virtual grouping of …\nA status change on a tablet ring with the …\nA status change on a strip on a device with the …\nAn unknown source\nAn unknown source\nThe toggle button in a mode group is the button assigned …\nReturn the button number that triggered this event, …\nReturn the button state of the event.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDevices without mode switching capabilities return <code>true</code> …\nDevices without mode switching capabilities return <code>true</code> …\nDevices without mode switching capabilities return <code>true</code> …\nThe returned number is the same index as passed to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into a general <code>TabletPadEvent</code> again\nReturn the key code that triggered this event, e.g. …\nReturn the key state of the event\nReturns the mode the button, ring, or strip that triggered …\nReturn the current mode this mode group is in.\nReturns the mode group that the button, ring, or strip …\nReturns the number of the ring that has changed state, …\nReturns the number of the strip that has changed state, …\nQuery the mode group for the number of available modes.\nReturns the current position of the ring, in degrees …\nReturns the current position of the strip, normalized to …\nReturns the source of the interaction with the ring.\nReturns the source of the interaction with the strip.\nThe event time for this event\nThe event time for this event in microseconds\nAn airbrush-like tool.\nOne or more axes have changed state on a device with the …\nA paintbrush-like tool.\nSignals that a tool has changed a logical button state on …\nTouching the surface\nEraser.\nIn proximity\nA mouse tool with a lens.\nA mouse bound to the tablet.\nOut of proximity\nA generic pen.\nPhysical drawing tool, e.g. Wacom Inking Pen\nSignals that a tool has come in or out of proximity of a …\nThe state of proximity for a tool on a device.\nAn object representing a tool being used by a device with …\nOne or more axes have changed state on a device with the …\nSignals that a tool has changed a logical button state on …\nAn event related to a tablet tool\nCommon functions all TabletTool-Events implement.\nSignals that a tool has come in or out of proximity of a …\nSignals that a tool has come in contact with the surface …\nAvailable tool types for a device with the …\nSignals that a tool has come in contact with the surface …\nThe tip contact state for a tool on a device.\nA rotary device with positional and rotation data\nNot touching the surface\nReturn the button that triggered this event.\nReturn the button state of the event.\nReturns the current distance from the tablet’s sensor, …\nCheck if the distance axis was updated in this event.\nReturn the delta between the last event and the current …\nReturn the delta between the last event and the current …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCheck if a tablet tool has a button with the passed-in …\nReturn whether the tablet tool supports distance.\nReturn whether the tablet tool supports pressure.\nReturn whether the tablet tool supports z-rotation.v\nReturn whether the tablet tool has a slider axis.\nReturn whether the tablet tool supports tilt.\nReturn whether the tablet tool has a relative wheel.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into a general <code>TabletToolEvent</code> again\nReturns <code>true</code> if the physical tool can be uniquely …\nReturns the current pressure being applied on the tool in …\nCheck if the pressure axis was updated in this event. For …\nReturns the new proximity state of a tool from a proximity …\nReturns the current z rotation of the tool in degrees, …\nCheck if the z-rotation axis was updated in this event.\nFor the button of a <code>TabletToolButtonEvent</code>, return the …\nReturn the serial number of a tool.\nReturns the current size in mm along the major axis of the …\nCheck if the size major axis was updated in this event.\nReturns the current size in mm along the minor axis of the …\nCheck if the size minor axis was updated in this event.\nCheck if the slider axis was updated in this event.\nReturns the current position of the slider on the tool, …\nReturns whether the tablet tool has a ellipsis major and …\nReturns the current tilt along the X axis of the tablet’…\nCheck if the tilt x axis was updated in this event.\nReturns the current tilt along the Y axis of the tablet’…\nCheck if the tilt y axis was updated in this event.\nThe event time for this event\nThe event time for this event in microseconds\nReturns the new tip state of a tool from a tip event.\nReturns the tool that was in use during this event.\nReturn the tool ID for a tool object.\nReturn the tool type for a tool object, see …\nReturn the delta for the wheel in degrees.\nReturn the delta for the wheel in discrete steps (e.g. …\nCheck if the wheel axis was updated in this event.\nReturns the X coordinate of the tablet tool, in mm from …\nCheck if the x axis was updated in this event.\nReturn the current absolute x coordinate of the tablet …\nReturns the Y coordinate of the tablet tool, in mm from …\nCheck if the y axis was updated in this event.\nReturn the current absolute y coordinate of the tablet …\nAn event cancelling previous events on this slot\nAn event related to resting the finger on the screen\nSignals the end of a set of touchpoints at one device …\nAn event related to moving a finger on the screen\nAn event cancelling previous events on this slot\nAn event related to resting the finger on the screen\nA touch related <code>Event</code>\nPosition related functions all TouchEvents implement, that …\nTouch slot related functions all TouchEvents implement, …\nCommon functions all Touch-Events implement.\nSignals the end of a set of touchpoints at one device …\nAn event related to moving a finger on the screen\nAn event related to lifting the finger on the screen\nAn event related to lifting the finger on the screen\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into a general <code>TouchEvent</code> again\nGet the seat slot of the touch event.\nGet the slot of this touch event.\nThe event time for this event\nThe event time for this event in microseconds\nReturn the current absolute x coordinate of the touch …\nReturn the current absolute x coordinate of the touch …\nReturn the current absolute y coordinate of the touch …\nReturn the current absolute y coordinate of the touch …\nClose the file descriptor.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n@ingroup base @struct libinput\n@ingroup device\n@ingroup config\nAn adaptive acceleration profile. Pointer acceleration …\nA flat acceleration profile. Pointer motion is accelerated …\nPlaceholder for devices that don’t have a configurable …\n@ingroup config\nUse software-button areas to generate button events.\nThe number of fingers decides which button press to …\nDo not send software-emulated button events. This has no …\n@ingroup config\nDrag lock is to be disabled, or is currently disabled\nDrag lock is to be enabled, or is currently disabled\n@ingroup config\nDrag is to be disabled, or is currently disabled.\nDrag is to be enabled, or is currently enabled\n@ingroup config\n@ingroup config\nMiddle mouse button emulation is to be disabled, or is …\nMiddle mouse button emulation is to be enabled, or is …\n@ingroup config\nSend scroll events when two fingers are logically down on …\nSend scroll events when a finger moves along the bottom or …\nNever send scroll events instead of pointer motion events. …\nSend scroll events when a button is down and the device …\n@ingroup config\nDo not send events through this device. Depending on the …\nIf an external pointer device is plugged in, do not send …\nSend events from this device normally. This is a …\n@ingroup config\n&lt; Invalid parameter range\n&lt; Config applied successfully\n&lt; Configuration not available on this device\n@ingroup config\n@ingroup config\n1/2/3 finger tap maps to left/middle/right\n1/2/3 finger tap maps to left/right/middle\n@ingroup config\n&lt; Tapping is to be disabled, or is currently disabled\n&lt; Tapping is to be enabled, or is currently enabled\n@ingroup device @struct libinput_device\n@ingroup device\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup config\n@ingroup device\n@ingroup device\n@ingroup device\n@ingroup device\n@ingroup device\n@ingroup device\n@ingroup device\n@ingroup device\n@ingroup device\n@ingroup device\n@ingroup device\n@ingroup device @struct libinput_device_group\n@ingroup device\n@ingroup device\n@ingroup device\n@ingroup device\n@ingroup device\n@ingroup device\n@ingroup device\n@ingroup device\n@ingroup device\n@ingroup device\n@ingroup device\n@ingroup device\n@ingroup tablet_pad_modes\n@ingroup device\n@ingroup tablet_pad_modes\n@ingroup device\n@ingroup device\n@ingroup device\n@ingroup device\n@ingroup device\n@ingroup base\n@ingroup event @struct libinput_event\n@ingroup event\n@ingroup event @struct libinput_event_device_notify\n@ingroup event\n@ingroup event_gesture\n@ingroup event_gesture\n@ingroup event_gesture\n@ingroup event_gesture\n@ingroup event_gesture\n@ingroup event_gesture\n@ingroup event_gesture\n@ingroup event_gesture\n@ingroup event_gesture\n@ingroup event_gesture\n@ingroup event_gesture\n@ingroup event\n@ingroup event\n@ingroup event\n@ingroup event\n@ingroup event\n@ingroup event\n@ingroup event\n@ingroup event\n@ingroup event\n@ingroup event\n@ingroup event\n@ingroup event_keyboard @struct libinput_event_keyboard\n@ingroup event_keyboard\n@ingroup event_keyboard\n@ingroup event_keyboard\n@ingroup event_keyboard\n@ingroup event_keyboard\n@ingroup event_keyboard\n@ingroup event_pointer @struct libinput_event_pointer\n@ingroup event_pointer\n@ingroup event_pointer\n@ingroup event_pointer\n@ingroup event_pointer\n@ingroup event_pointer\n@ingroup event_pointer\n@ingroup event_pointer\n@ingroup event_pointer\n@ingroup event_pointer\n@ingroup event_pointer\n@ingroup event_pointer\n@ingroup event_pointer\n@ingroup event_pointer\n@ingroup event_pointer\n@ingroup event_pointer\n@ingroup event_pointer\n@ingroup event_pointer\n@ingroup event_pointer\n@ingroup event_pointer\n@ingroup event_pointer\n@ingroup event_switch @struct libinput_event_switch\n@ingroup event_switch\n@ingroup event_switch\n@ingroup event_switch\n@ingroup event_switch\n@ingroup event_switch\n@ingroup event_tablet_pad @struct libinput_event_tablet_pad\n@ingroup event_tablet_pad\n@ingroup event_tablet_pad\n@ingroup event_tablet_pad\n@ingroup event_tablet_pad\n@ingroup event_tablet_pad\n@ingroup event_tablet_pad\n@ingroup event_tablet_pad\n@ingroup event_tablet_pad\n@ingroup event_tablet_pad\n@ingroup event_tablet_pad\n@ingroup event_tablet_pad\n@ingroup event_tablet_pad\n@ingroup event_tablet_pad\n@ingroup event_tablet_pad\n@ingroup event_tablet_pad\n@ingroup event_tablet @struct libinput_event_tablet_tool\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_touch @struct libinput_event_touch\n@ingroup event_touch\n@ingroup event_touch\n@ingroup event_touch\n@ingroup event_touch\n@ingroup event_touch\n@ingroup event_touch\n@ingroup event_touch\n@ingroup event_touch\n@ingroup event_touch\n@ingroup base\nSignals that a device has been added to the context. The …\nSignals that a device has been removed. No more events …\n@since 1.19\n@since 1.19\nA key pressed on a device with the @ref …\nA key pressed on a device with the @ref …\nA key pressed on a device with the @ref …\nA key pressed on a device with the @ref …\nA key pressed on a device with the @ref …\nA key pressed on a device with the @ref …\nSignals that a device has been removed. No more events …\nThis is not a real event type, and is only used to tell …\nA scroll event from various sources.\nSignals that a device has been removed. No more events …\nSignals that a device has been removed. No more events …\nSignals that a device has been removed. No more events …\nA scroll event from a continuous scroll source, e.g. button\nA scroll event caused by the movement of one or more …\nA scroll event from a wheel. This event is sent is sent <strong>in </strong>…\n@since 1.7\nA button pressed on a device with the @ref …\nA key pressed on a device with the @ref …\nA status change on a tablet ring with the @ref …\nA status change on a strip on a device with the @ref …\nOne or more axes have changed state on a device with the …\nSignals that a tool has changed a logical button state on a\nSignals that a tool has come in or out of proximity of a …\nSignals that a tool has come in contact with the surface …\nA scroll event from a continuous scroll source, e.g. button\nA scroll event from a continuous scroll source, e.g. button\nSignals the end of a set of touchpoints at one device …\nA scroll event from a continuous scroll source, e.g. button\nA scroll event from a continuous scroll source, e.g. button\n@ingroup base\n@ingroup base\n@ingroup base\n@ingroup base @struct libinput_interface\n@ingroup device\n@ingroup device\n@ingroup base\n@ingroup base\n@ingroup base\n@ingroup base\n@ingroup base\n@ingroup base\n@ingroup base\n@ingroup device\n@ingroup device\nThe event is caused by the motion of some device.\nThe event is caused by the movement of one or more fingers …\nThe event is caused by the rotation of a wheel.\nThe event is caused by the tilting of a mouse wheel rather …\n@ingroup base\n@ingroup base\n@ingroup seat @struct libinput_seat\n@ingroup seat\n@ingroup seat\n@ingroup seat\n@ingroup seat\n@ingroup seat\n@ingroup seat\n@ingroup seat\n@ingroup base\n@ingroup base\n@ingroup device\nThe laptop lid was closed when the switch state is @ref …\nThis switch indicates whether the device is in normal …\n@ingroup device\n@ingroup tablet_pad_modes @struct …\n@ingroup tablet_pad_modes\n@ingroup tablet_pad_modes\n@ingroup tablet_pad_modes\n@ingroup tablet_pad_modes\n@ingroup tablet_pad_modes\n@ingroup tablet_pad_modes\n@ingroup tablet_pad_modes\n@ingroup tablet_pad_modes\n@ingroup tablet_pad_modes\n@ingroup tablet_pad_modes\n@ingroup tablet_pad_modes\n@ingroup event_tablet_pad\nThe event is caused by the movement of one or more fingers …\n@ingroup event_tablet_pad\nThe event is caused by the movement of one or more fingers …\n@ingroup device @struct libinput_tablet_tool\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup device\n@ingroup event_tablet\n@ingroup event_tablet\n@ingroup device\n@ingroup device\n&lt; An airbrush-like tool\n&lt; A paintbrush-like tool\n&lt; Eraser\n&lt; A mouse tool with a lens\n&lt; A mouse bound to the tablet\n&lt; A generic pen\n&lt; Physical drawing tool, e.g. Wacom Inking Pen\n&lt; A rotary device with positional and rotation data\n@ingroup event_tablet\n@ingroup base\n@ingroup base\n@ingroup base\nOpen the device at the given path with the flags provided …")